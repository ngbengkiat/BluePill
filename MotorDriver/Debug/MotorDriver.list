
MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f8  080040f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080040f8  080040f8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040f8  080040f8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000080  08004180  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004180  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac41  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002671  00000000  00000000  0002acea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002dd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b104  00000000  00000000  0002e588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad60  00000000  00000000  0004968c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3bd  00000000  00000000  000543ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e17a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf8  00000000  00000000  000e17fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fa8 	.word	0x08003fa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003fa8 	.word	0x08003fa8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1d      	ldr	r3, [pc, #116]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a1c      	ldr	r2, [pc, #112]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1a      	ldr	r3, [pc, #104]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b17      	ldr	r3, [pc, #92]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a16      	ldr	r2, [pc, #88]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b14      	ldr	r3, [pc, #80]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a10      	ldr	r2, [pc, #64]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0e      	ldr	r3, [pc, #56]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2104      	movs	r1, #4
 80001ac:	480b      	ldr	r0, [pc, #44]	; (80001dc <MX_GPIO_Init+0x90>)
 80001ae:	f001 fcdf 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80001b2:	2304      	movs	r3, #4
 80001b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001b6:	2301      	movs	r3, #1
 80001b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ba:	2300      	movs	r3, #0
 80001bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001be:	2302      	movs	r3, #2
 80001c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001c2:	f107 0310 	add.w	r3, r7, #16
 80001c6:	4619      	mov	r1, r3
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <MX_GPIO_Init+0x90>)
 80001ca:	f001 fb4d 	bl	8001868 <HAL_GPIO_Init>

}
 80001ce:	bf00      	nop
 80001d0:	3720      	adds	r7, #32
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <clrscr>:
// ---------------------------------------------------------------------------------
// Terminal screen cursor control functions
// clear screen of WinH8
// ---------------------------------------------------------------------------------
void clrscr( void )
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
        printf( "\x1b[2J" ) ; /* extra ESC char required for 330 */
 80001e4:	4802      	ldr	r0, [pc, #8]	; (80001f0 <clrscr+0x10>)
 80001e6:	f002 feb1 	bl	8002f4c <iprintf>
                                /* It seems that when 330 is set to */
                                /* 0 wait states, it is too FAST ??????*/
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	08003fc0 	.word	0x08003fc0

080001f4 <gotoxy>:

// ---------------------------------------------------------------------------------
// Put cursor into column-x and row-y of WinH8
// ---------------------------------------------------------------------------------
void gotoxy(int x, int y) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]

    x=(x>150)?150:((x<1)?1:x);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2b96      	cmp	r3, #150	; 0x96
 8000202:	dc04      	bgt.n	800020e <gotoxy+0x1a>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b01      	cmp	r3, #1
 8000208:	bfb8      	it	lt
 800020a:	2301      	movlt	r3, #1
 800020c:	e000      	b.n	8000210 <gotoxy+0x1c>
 800020e:	2396      	movs	r3, #150	; 0x96
 8000210:	607b      	str	r3, [r7, #4]
    y=(y>150)?150:((y<1)?1:y);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	2b96      	cmp	r3, #150	; 0x96
 8000216:	dc04      	bgt.n	8000222 <gotoxy+0x2e>
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	2b01      	cmp	r3, #1
 800021c:	bfb8      	it	lt
 800021e:	2301      	movlt	r3, #1
 8000220:	e000      	b.n	8000224 <gotoxy+0x30>
 8000222:	2396      	movs	r3, #150	; 0x96
 8000224:	603b      	str	r3, [r7, #0]

   printf("\x1b[%d;%dh", y, x);
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	6839      	ldr	r1, [r7, #0]
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <gotoxy+0x44>)
 800022c:	f002 fe8e 	bl	8002f4c <iprintf>

}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	08003fc8 	.word	0x08003fc8

0800023c <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800024a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000252:	68fb      	ldr	r3, [r7, #12]
}
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 800025e:	b480      	push	{r7}
 8000260:	b083      	sub	sp, #12
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f06f 0220 	mvn.w	r2, #32
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	60da      	str	r2, [r3, #12]
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr

08000296 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	60da      	str	r2, [r3, #12]
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	f003 0320 	and.w	r3, r3, #32
 80002c4:	2b20      	cmp	r3, #32
 80002c6:	bf0c      	ite	eq
 80002c8:	2301      	moveq	r3, #1
 80002ca:	2300      	movne	r3, #0
 80002cc:	b2db      	uxtb	r3, r3
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr

080002d8 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e8:	2b80      	cmp	r3, #128	; 0x80
 80002ea:	bf0c      	ite	eq
 80002ec:	2301      	moveq	r3, #1
 80002ee:	2300      	movne	r3, #0
 80002f0:	b2db      	uxtb	r3, r3
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <LL_USART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b01      	cmp	r3, #1
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
}
 8000316:	4618      	mov	r0, r3
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	b2db      	uxtb	r3, r3
}
 800032e:	4618      	mov	r0, r3
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000344:	78fa      	ldrb	r2, [r7, #3]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	605a      	str	r2, [r3, #4]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <STDIO_init>:
int16_t usartIRQnLut[NUM_UART] = {USART1_IRQn, USART2_IRQn,USART3_IRQn };

// ---------------------------------------------------------------------------------
// @brief : To init one of the UART as STDIO port (for printf(), GetChar() etc)
// @retval: none
void STDIO_init( ) {
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

    // turn off buffers, so IO occurs immediately
    setvbuf(stdin, NULL, _IONBF, 0);
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <STDIO_init+0x38>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	6858      	ldr	r0, [r3, #4]
 800035e:	2300      	movs	r3, #0
 8000360:	2202      	movs	r2, #2
 8000362:	2100      	movs	r1, #0
 8000364:	f002 fe0a 	bl	8002f7c <setvbuf>
    setvbuf(stdout, NULL, _IONBF, 0);
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <STDIO_init+0x38>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	6898      	ldr	r0, [r3, #8]
 800036e:	2300      	movs	r3, #0
 8000370:	2202      	movs	r2, #2
 8000372:	2100      	movs	r1, #0
 8000374:	f002 fe02 	bl	8002f7c <setvbuf>
    setvbuf(stderr, NULL, _IONBF, 0);
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <STDIO_init+0x38>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	68d8      	ldr	r0, [r3, #12]
 800037e:	2300      	movs	r3, #0
 8000380:	2202      	movs	r2, #2
 8000382:	2100      	movs	r1, #0
 8000384:	f002 fdfa 	bl	8002f7c <setvbuf>

}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000001c 	.word	0x2000001c

08000390 <RxCharISR>:
}
// ---------------------------------------------------------------------------------
// @brief : To get a character from UART through interrupt
// @param : uartNum is the USART number minus 1, so USART1 -> 0
// @retval: character received
int RxCharISR(int16_t uartNum) {
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	unsigned char ch;

	while(rxWriteIndex[uartNum]==rxReadIndex[uartNum]);
 800039a:	bf00      	nop
 800039c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003a0:	4a1d      	ldr	r2, [pc, #116]	; (8000418 <RxCharISR+0x88>)
 80003a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003a6:	b21a      	sxth	r2, r3
 80003a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ac:	491b      	ldr	r1, [pc, #108]	; (800041c <RxCharISR+0x8c>)
 80003ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003b2:	b21b      	sxth	r3, r3
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d0f1      	beq.n	800039c <RxCharISR+0xc>

	ch = rxBuffer[uartNum][rxReadIndex[uartNum]];
 80003b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80003c0:	4916      	ldr	r1, [pc, #88]	; (800041c <RxCharISR+0x8c>)
 80003c2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80003c6:	b212      	sxth	r2, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <RxCharISR+0x90>)
 80003cc:	019b      	lsls	r3, r3, #6
 80003ce:	4413      	add	r3, r2
 80003d0:	440b      	add	r3, r1
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	73fb      	strb	r3, [r7, #15]

	rxReadIndex[uartNum]++;
 80003d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003da:	4a10      	ldr	r2, [pc, #64]	; (800041c <RxCharISR+0x8c>)
 80003dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003e0:	b212      	sxth	r2, r2
 80003e2:	b292      	uxth	r2, r2
 80003e4:	3201      	adds	r2, #1
 80003e6:	b292      	uxth	r2, r2
 80003e8:	b211      	sxth	r1, r2
 80003ea:	4a0c      	ldr	r2, [pc, #48]	; (800041c <RxCharISR+0x8c>)
 80003ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if (rxReadIndex[uartNum]>=BUFSIZE)
 80003f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003f4:	4a09      	ldr	r2, [pc, #36]	; (800041c <RxCharISR+0x8c>)
 80003f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003fa:	b21b      	sxth	r3, r3
 80003fc:	2b3f      	cmp	r3, #63	; 0x3f
 80003fe:	dd05      	ble.n	800040c <RxCharISR+0x7c>
		rxReadIndex[uartNum]=0;
 8000400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000404:	4a05      	ldr	r2, [pc, #20]	; (800041c <RxCharISR+0x8c>)
 8000406:	2100      	movs	r1, #0
 8000408:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return ch;
 800040c:	7bfb      	ldrb	r3, [r7, #15]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	20000224 	.word	0x20000224
 800041c:	2000021c 	.word	0x2000021c
 8000420:	2000009c 	.word	0x2000009c

08000424 <TxCharISR>:
// ---------------------------------------------------------------------------------
// @brief : To put a character into usart through interrupt
// @param : c-character to send,
// @param : uartNum is the USART number minus 1, so USART1 -> 0
// @retval: none
int TxCharISR(int16_t uartNum, char c) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	460a      	mov	r2, r1
 800042e:	80fb      	strh	r3, [r7, #6]
 8000430:	4613      	mov	r3, r2
 8000432:	717b      	strb	r3, [r7, #5]

	// If tx buffer is full, wait
	while((txWriteIndex[uartNum]==(txReadIndex[uartNum]-1)) ||
 8000434:	bf00      	nop
 8000436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800043a:	4a32      	ldr	r2, [pc, #200]	; (8000504 <TxCharISR+0xe0>)
 800043c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000440:	b21b      	sxth	r3, r3
 8000442:	4619      	mov	r1, r3
 8000444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000448:	4a2f      	ldr	r2, [pc, #188]	; (8000508 <TxCharISR+0xe4>)
 800044a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800044e:	b21b      	sxth	r3, r3
 8000450:	3b01      	subs	r3, #1
 8000452:	4299      	cmp	r1, r3
 8000454:	d0ef      	beq.n	8000436 <TxCharISR+0x12>
		(txWriteIndex[uartNum]==(txReadIndex[uartNum]+BUFSIZE-1)) ) {
 8000456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800045a:	4a2a      	ldr	r2, [pc, #168]	; (8000504 <TxCharISR+0xe0>)
 800045c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000460:	b21b      	sxth	r3, r3
 8000462:	4619      	mov	r1, r3
 8000464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000468:	4a27      	ldr	r2, [pc, #156]	; (8000508 <TxCharISR+0xe4>)
 800046a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800046e:	b21b      	sxth	r3, r3
 8000470:	333f      	adds	r3, #63	; 0x3f
	while((txWriteIndex[uartNum]==(txReadIndex[uartNum]-1)) ||
 8000472:	4299      	cmp	r1, r3
 8000474:	d0df      	beq.n	8000436 <TxCharISR+0x12>
//			break;
//		}
	}


	txBuffer[uartNum][txWriteIndex[uartNum]] = c;
 8000476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800047a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800047e:	4921      	ldr	r1, [pc, #132]	; (8000504 <TxCharISR+0xe0>)
 8000480:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000484:	b212      	sxth	r2, r2
 8000486:	4611      	mov	r1, r2
 8000488:	4a20      	ldr	r2, [pc, #128]	; (800050c <TxCharISR+0xe8>)
 800048a:	019b      	lsls	r3, r3, #6
 800048c:	4413      	add	r3, r2
 800048e:	440b      	add	r3, r1
 8000490:	797a      	ldrb	r2, [r7, #5]
 8000492:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop

	__disable_irq();
	txWriteIndex[uartNum]++;
 8000498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800049c:	4a19      	ldr	r2, [pc, #100]	; (8000504 <TxCharISR+0xe0>)
 800049e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004a2:	b212      	sxth	r2, r2
 80004a4:	b292      	uxth	r2, r2
 80004a6:	3201      	adds	r2, #1
 80004a8:	b292      	uxth	r2, r2
 80004aa:	b211      	sxth	r1, r2
 80004ac:	4a15      	ldr	r2, [pc, #84]	; (8000504 <TxCharISR+0xe0>)
 80004ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if (txWriteIndex[uartNum]>=BUFSIZE)
 80004b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004b6:	4a13      	ldr	r2, [pc, #76]	; (8000504 <TxCharISR+0xe0>)
 80004b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004bc:	b21b      	sxth	r3, r3
 80004be:	2b3f      	cmp	r3, #63	; 0x3f
 80004c0:	dd05      	ble.n	80004ce <TxCharISR+0xaa>
		txWriteIndex[uartNum]=0;
 80004c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c6:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <TxCharISR+0xe0>)
 80004c8:	2100      	movs	r1, #0
 80004ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  __ASM volatile ("cpsie i" : : : "memory");
 80004ce:	b662      	cpsie	i
}
 80004d0:	bf00      	nop
	__enable_irq();

	if (!txEnableFlag[uartNum]) {
 80004d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <TxCharISR+0xec>)
 80004d8:	5cd3      	ldrb	r3, [r2, r3]
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d10c      	bne.n	80004fa <TxCharISR+0xd6>
		// turn ON tx interrupt to begin the transfer
		txEnableFlag[uartNum] = TRUE;
 80004e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <TxCharISR+0xec>)
 80004e6:	2101      	movs	r1, #1
 80004e8:	54d1      	strb	r1, [r2, r3]
		LL_USART_EnableIT_TXE(usartLut[uartNum]);
 80004ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ee:	4a09      	ldr	r2, [pc, #36]	; (8000514 <TxCharISR+0xf0>)
 80004f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff febf 	bl	8000278 <LL_USART_EnableIT_TXE>
	}
	return c;
 80004fa:	797b      	ldrb	r3, [r7, #5]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000234 	.word	0x20000234
 8000508:	2000022c 	.word	0x2000022c
 800050c:	2000015c 	.word	0x2000015c
 8000510:	20000248 	.word	0x20000248
 8000514:	20000004 	.word	0x20000004

08000518 <USART_ISR>:


// @brief : General usart ISR
// @param : uartNum is the USART number minus 1, so USART1 -> 0
// @retval: none
void USART_ISR(int16_t uartNum) {
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
	char ch;
	USART_TypeDef*	uart;

	uart = usartLut[uartNum];
 8000522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000526:	4a49      	ldr	r2, [pc, #292]	; (800064c <USART_ISR+0x134>)
 8000528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052c:	60fb      	str	r3, [r7, #12]

	if (LL_USART_IsEnabledIT_ERROR(uart)==SET) {
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f7ff fee4 	bl	80002fc <LL_USART_IsEnabledIT_ERROR>
 8000534:	4603      	mov	r3, r0
 8000536:	2b01      	cmp	r3, #1
 8000538:	d105      	bne.n	8000546 <USART_ISR+0x2e>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
		LL_USART_ClearFlag_ORE(uart) ;
 800053a:	68f8      	ldr	r0, [r7, #12]
 800053c:	f7ff fe7e 	bl	800023c <LL_USART_ClearFlag_ORE>
		LL_USART_ReceiveData8(uart);
 8000540:	68f8      	ldr	r0, [r7, #12]
 8000542:	f7ff feed 	bl	8000320 <LL_USART_ReceiveData8>
	}

	//if (LL_USART_IsActiveFlag_RXNE(uart)==SET)
	if (LL_USART_IsEnabledIT_RXNE(uart)==SET)
 8000546:	68f8      	ldr	r0, [r7, #12]
 8000548:	f7ff feb4 	bl	80002b4 <LL_USART_IsEnabledIT_RXNE>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d12b      	bne.n	80005aa <USART_ISR+0x92>
	{
		LL_USART_ClearFlag_RXNE(uart) ;
 8000552:	68f8      	ldr	r0, [r7, #12]
 8000554:	f7ff fe83 	bl	800025e <LL_USART_ClearFlag_RXNE>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
		rxBuffer[uartNum][rxWriteIndex[uartNum]++] = LL_USART_ReceiveData8(uart);
 8000558:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800055c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000560:	4a3b      	ldr	r2, [pc, #236]	; (8000650 <USART_ISR+0x138>)
 8000562:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000566:	b211      	sxth	r1, r2
 8000568:	b28a      	uxth	r2, r1
 800056a:	3201      	adds	r2, #1
 800056c:	b292      	uxth	r2, r2
 800056e:	b210      	sxth	r0, r2
 8000570:	4a37      	ldr	r2, [pc, #220]	; (8000650 <USART_ISR+0x138>)
 8000572:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
 8000576:	460d      	mov	r5, r1
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f7ff fed1 	bl	8000320 <LL_USART_ReceiveData8>
 800057e:	4603      	mov	r3, r0
 8000580:	4619      	mov	r1, r3
 8000582:	4a34      	ldr	r2, [pc, #208]	; (8000654 <USART_ISR+0x13c>)
 8000584:	01a3      	lsls	r3, r4, #6
 8000586:	4413      	add	r3, r2
 8000588:	442b      	add	r3, r5
 800058a:	460a      	mov	r2, r1
 800058c:	701a      	strb	r2, [r3, #0]

		if (rxWriteIndex[uartNum]>=BUFSIZE)
 800058e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000592:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <USART_ISR+0x138>)
 8000594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000598:	b21b      	sxth	r3, r3
 800059a:	2b3f      	cmp	r3, #63	; 0x3f
 800059c:	dd05      	ble.n	80005aa <USART_ISR+0x92>
			rxWriteIndex[uartNum]=0;
 800059e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a2:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <USART_ISR+0x138>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	if (LL_USART_IsEnabledIT_TXE(uart)==SET) {
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f7ff fe94 	bl	80002d8 <LL_USART_IsEnabledIT_TXE>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d145      	bne.n	8000642 <USART_ISR+0x12a>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);

		if (txWriteIndex[uartNum]!=txReadIndex[uartNum]) {
 80005b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ba:	4a27      	ldr	r2, [pc, #156]	; (8000658 <USART_ISR+0x140>)
 80005bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c6:	4925      	ldr	r1, [pc, #148]	; (800065c <USART_ISR+0x144>)
 80005c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d02f      	beq.n	8000632 <USART_ISR+0x11a>

			ch = txBuffer[uartNum][txReadIndex[uartNum]];
 80005d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005da:	4920      	ldr	r1, [pc, #128]	; (800065c <USART_ISR+0x144>)
 80005dc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80005e0:	b212      	sxth	r2, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a1e      	ldr	r2, [pc, #120]	; (8000660 <USART_ISR+0x148>)
 80005e6:	019b      	lsls	r3, r3, #6
 80005e8:	4413      	add	r3, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	72fb      	strb	r3, [r7, #11]

			LL_USART_TransmitData8(uart, ch);
 80005f0:	7afb      	ldrb	r3, [r7, #11]
 80005f2:	4619      	mov	r1, r3
 80005f4:	68f8      	ldr	r0, [r7, #12]
 80005f6:	f7ff fe9f 	bl	8000338 <LL_USART_TransmitData8>

			txReadIndex[uartNum]++;
 80005fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005fe:	4a17      	ldr	r2, [pc, #92]	; (800065c <USART_ISR+0x144>)
 8000600:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000604:	b212      	sxth	r2, r2
 8000606:	b292      	uxth	r2, r2
 8000608:	3201      	adds	r2, #1
 800060a:	b292      	uxth	r2, r2
 800060c:	b211      	sxth	r1, r2
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <USART_ISR+0x144>)
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (txReadIndex[uartNum]>=BUFSIZE)
 8000614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <USART_ISR+0x144>)
 800061a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061e:	b21b      	sxth	r3, r3
 8000620:	2b3f      	cmp	r3, #63	; 0x3f
 8000622:	dd0e      	ble.n	8000642 <USART_ISR+0x12a>
				txReadIndex[uartNum]=0;
 8000624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000628:	4a0c      	ldr	r2, [pc, #48]	; (800065c <USART_ISR+0x144>)
 800062a:	2100      	movs	r1, #0
 800062c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			LL_USART_DisableIT_TXE(uart);
		    txEnableFlag[uartNum] = FALSE;
		}

	}
}
 8000630:	e007      	b.n	8000642 <USART_ISR+0x12a>
			LL_USART_DisableIT_TXE(uart);
 8000632:	68f8      	ldr	r0, [r7, #12]
 8000634:	f7ff fe2f 	bl	8000296 <LL_USART_DisableIT_TXE>
		    txEnableFlag[uartNum] = FALSE;
 8000638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <USART_ISR+0x14c>)
 800063e:	2100      	movs	r1, #0
 8000640:	54d1      	strb	r1, [r2, r3]
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bdb0      	pop	{r4, r5, r7, pc}
 800064a:	bf00      	nop
 800064c:	20000004 	.word	0x20000004
 8000650:	20000224 	.word	0x20000224
 8000654:	2000009c 	.word	0x2000009c
 8000658:	20000234 	.word	0x20000234
 800065c:	2000022c 	.word	0x2000022c
 8000660:	2000015c 	.word	0x2000015c
 8000664:	20000248 	.word	0x20000248

08000668 <__io_getchar>:

// ---------------------------------------------------------------------------------
// @brief : To get a character from stdio, which is UART_STDIO
// @param : none
// @retval: character received
int __io_getchar() {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	return RxCharISR(UART_STDIO);
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <__io_getchar+0x18>)
 800066e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fe8c 	bl	8000390 <RxCharISR>
 8000678:	4603      	mov	r3, r0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000

08000684 <__io_putchar>:
// ---------------------------------------------------------------------------------
// @brief : To put a character into stdio, which is UART_STDIO
// @param c: character to send
// @retval: none

int __io_putchar(uint8_t c) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	return TxCharISR(UART_STDIO,(char)c);
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <__io_putchar+0x24>)
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	79fa      	ldrb	r2, [r7, #7]
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fec3 	bl	8000424 <TxCharISR>
 800069e:	4603      	mov	r3, r0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000000 	.word	0x20000000

080006ac <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
	...

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 ff6d 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f853 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f7ff fd21 	bl	800014c <MX_GPIO_Init>
  MX_TIM4_Init();
 800070a:	f000 fd0b 	bl	8001124 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800070e:	f000 fe6d 	bl	80013ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000712:	f000 fc01 	bl	8000f18 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000716:	f000 fc89 	bl	800102c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800071a:	f000 fed1 	bl	80014c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  STDIO_init();
 800071e:	f7ff fe19 	bl	8000354 <STDIO_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  clrscr();
 8000722:	f7ff fd5d 	bl	80001e0 <clrscr>
  printf("Hello World! %s", __DATE__ __TIME__);
 8000726:	491a      	ldr	r1, [pc, #104]	; (8000790 <main+0x98>)
 8000728:	481a      	ldr	r0, [pc, #104]	; (8000794 <main+0x9c>)
 800072a:	f002 fc0f 	bl	8002f4c <iprintf>
  int i=0;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  char s[] = "finally...\n";
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <main+0xa0>)
 8000734:	463b      	mov	r3, r7
 8000736:	ca07      	ldmia	r2, {r0, r1, r2}
 8000738:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  //char c = __io_getchar();
//	  putchar(c);
//	  putchar(c);
//	  putchar('\n');
	  gotoxy(5,5);
 800073c:	2105      	movs	r1, #5
 800073e:	2005      	movs	r0, #5
 8000740:	f7ff fd58 	bl	80001f4 <gotoxy>
	  printf("enc=%6d %6d", (int16_t)LL_TIM_GetCounter(TIM2), (int16_t)LL_TIM_GetCounter(TIM3));
 8000744:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000748:	f7ff ffb0 	bl	80006ac <LL_TIM_GetCounter>
 800074c:	4603      	mov	r3, r0
 800074e:	b21b      	sxth	r3, r3
 8000750:	461c      	mov	r4, r3
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <main+0xa4>)
 8000754:	f7ff ffaa 	bl	80006ac <LL_TIM_GetCounter>
 8000758:	4603      	mov	r3, r0
 800075a:	b21b      	sxth	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	4621      	mov	r1, r4
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <main+0xa8>)
 8000762:	f002 fbf3 	bl	8002f4c <iprintf>
	  gotoxy(5,7);
 8000766:	2107      	movs	r1, #7
 8000768:	2005      	movs	r0, #5
 800076a:	f7ff fd43 	bl	80001f4 <gotoxy>
	  printf("i=%d",i++);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	60fa      	str	r2, [r7, #12]
 8000774:	4619      	mov	r1, r3
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <main+0xac>)
 8000778:	f002 fbe8 	bl	8002f4c <iprintf>

      // LED ON
      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
	  LL_TIM_OC_SetCompareCH1(TIM4, 200);
 800077c:	21c8      	movs	r1, #200	; 0xc8
 800077e:	480a      	ldr	r0, [pc, #40]	; (80007a8 <main+0xb0>)
 8000780:	f7ff ff9f 	bl	80006c2 <LL_TIM_OC_SetCompareCH1>
	  LL_TIM_OC_SetCompareCH2(TIM4, 200);
 8000784:	21c8      	movs	r1, #200	; 0xc8
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <main+0xb0>)
 8000788:	f7ff ffa8 	bl	80006dc <LL_TIM_OC_SetCompareCH2>
  {
 800078c:	e7d1      	b.n	8000732 <main+0x3a>
 800078e:	bf00      	nop
 8000790:	08003fd4 	.word	0x08003fd4
 8000794:	08003fe8 	.word	0x08003fe8
 8000798:	0800400c 	.word	0x0800400c
 800079c:	40000400 	.word	0x40000400
 80007a0:	08003ff8 	.word	0x08003ff8
 80007a4:	08004004 	.word	0x08004004
 80007a8:	40000800 	.word	0x40000800

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b090      	sub	sp, #64	; 0x40
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	2228      	movs	r2, #40	; 0x28
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fbbe 	bl	8002f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d2:	2301      	movs	r3, #1
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d6:	2310      	movs	r3, #16
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007de:	2300      	movs	r3, #0
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007e2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 f9d7 	bl	8001ba0 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007f8:	f000 f819 	bl	800082e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2102      	movs	r1, #2
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fc42 	bl	80020a0 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000822:	f000 f804 	bl	800082e <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3740      	adds	r7, #64	; 0x40
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000832:	b672      	cpsid	i
}
 8000834:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000836:	e7fe      	b.n	8000836 <Error_Handler+0x8>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_MspInit+0x5c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <HAL_MspInit+0x5c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_MspInit+0x5c>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x5c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x5c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x5c>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_MspInit+0x60>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_MspInit+0x60>)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40021000 	.word	0x40021000
 8000898:	40010000 	.word	0x40010000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e2:	f000 fec1 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}

080008ea <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_ISR(0);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fe12 	bl	8000518 <USART_ISR>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_ISR(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff fe0b 	bl	8000518 <USART_ISR>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}

08000906 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	e00a      	b.n	800092e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000918:	f7ff fea6 	bl	8000668 <__io_getchar>
 800091c:	4601      	mov	r1, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	60ba      	str	r2, [r7, #8]
 8000924:	b2ca      	uxtb	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3301      	adds	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	429a      	cmp	r2, r3
 8000934:	dbf0      	blt.n	8000918 <_read+0x12>
	}

return len;
 8000936:	687b      	ldr	r3, [r7, #4]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e009      	b.n	8000966 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	60ba      	str	r2, [r7, #8]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe92 	bl	8000684 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbf1      	blt.n	8000952 <_write+0x12>
	}
	return len;
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <_close>:

int _close(int file)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	return -1;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099e:	605a      	str	r2, [r3, #4]
	return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <_isatty>:

int _isatty(int file)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	return 1;
 80009b4:	2301      	movs	r3, #1
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f002 fa6e 	bl	8002ee8 <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20005000 	.word	0x20005000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	2000023c 	.word	0x2000023c
 8000a40:	20000260 	.word	0x20000260

08000a44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <LL_TIM_EnableCounter>:
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f043 0201 	orr.w	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <LL_TIM_EnableARRPreload>:
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	601a      	str	r2, [r3, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <LL_TIM_DisableARRPreload>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <LL_TIM_CC_EnableChannel>:
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a1a      	ldr	r2, [r3, #32]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	621a      	str	r2, [r3, #32]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
	...

08000acc <LL_TIM_OC_DisableFast>:
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d01c      	beq.n	8000b16 <LL_TIM_OC_DisableFast+0x4a>
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d017      	beq.n	8000b12 <LL_TIM_OC_DisableFast+0x46>
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	2b10      	cmp	r3, #16
 8000ae6:	d012      	beq.n	8000b0e <LL_TIM_OC_DisableFast+0x42>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b40      	cmp	r3, #64	; 0x40
 8000aec:	d00d      	beq.n	8000b0a <LL_TIM_OC_DisableFast+0x3e>
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000af4:	d007      	beq.n	8000b06 <LL_TIM_OC_DisableFast+0x3a>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000afc:	d101      	bne.n	8000b02 <LL_TIM_OC_DisableFast+0x36>
 8000afe:	2305      	movs	r3, #5
 8000b00:	e00a      	b.n	8000b18 <LL_TIM_OC_DisableFast+0x4c>
 8000b02:	2306      	movs	r3, #6
 8000b04:	e008      	b.n	8000b18 <LL_TIM_OC_DisableFast+0x4c>
 8000b06:	2304      	movs	r3, #4
 8000b08:	e006      	b.n	8000b18 <LL_TIM_OC_DisableFast+0x4c>
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e004      	b.n	8000b18 <LL_TIM_OC_DisableFast+0x4c>
 8000b0e:	2302      	movs	r3, #2
 8000b10:	e002      	b.n	8000b18 <LL_TIM_OC_DisableFast+0x4c>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <LL_TIM_OC_DisableFast+0x4c>
 8000b16:	2300      	movs	r3, #0
 8000b18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3318      	adds	r3, #24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LL_TIM_OC_DisableFast+0x80>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	440b      	add	r3, r1
 8000b28:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	4907      	ldr	r1, [pc, #28]	; (8000b50 <LL_TIM_OC_DisableFast+0x84>)
 8000b32:	5ccb      	ldrb	r3, [r1, r3]
 8000b34:	4619      	mov	r1, r3
 8000b36:	2304      	movs	r3, #4
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	08004040 	.word	0x08004040
 8000b50:	08004048 	.word	0x08004048

08000b54 <LL_TIM_OC_EnablePreload>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d01c      	beq.n	8000b9e <LL_TIM_OC_EnablePreload+0x4a>
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d017      	beq.n	8000b9a <LL_TIM_OC_EnablePreload+0x46>
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b10      	cmp	r3, #16
 8000b6e:	d012      	beq.n	8000b96 <LL_TIM_OC_EnablePreload+0x42>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2b40      	cmp	r3, #64	; 0x40
 8000b74:	d00d      	beq.n	8000b92 <LL_TIM_OC_EnablePreload+0x3e>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b7c:	d007      	beq.n	8000b8e <LL_TIM_OC_EnablePreload+0x3a>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b84:	d101      	bne.n	8000b8a <LL_TIM_OC_EnablePreload+0x36>
 8000b86:	2305      	movs	r3, #5
 8000b88:	e00a      	b.n	8000ba0 <LL_TIM_OC_EnablePreload+0x4c>
 8000b8a:	2306      	movs	r3, #6
 8000b8c:	e008      	b.n	8000ba0 <LL_TIM_OC_EnablePreload+0x4c>
 8000b8e:	2304      	movs	r3, #4
 8000b90:	e006      	b.n	8000ba0 <LL_TIM_OC_EnablePreload+0x4c>
 8000b92:	2303      	movs	r3, #3
 8000b94:	e004      	b.n	8000ba0 <LL_TIM_OC_EnablePreload+0x4c>
 8000b96:	2302      	movs	r3, #2
 8000b98:	e002      	b.n	8000ba0 <LL_TIM_OC_EnablePreload+0x4c>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <LL_TIM_OC_EnablePreload+0x4c>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3318      	adds	r3, #24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LL_TIM_OC_EnablePreload+0x80>)
 8000bac:	5cd3      	ldrb	r3, [r2, r3]
 8000bae:	440b      	add	r3, r1
 8000bb0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <LL_TIM_OC_EnablePreload+0x84>)
 8000bba:	5ccb      	ldrb	r3, [r1, r3]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	408b      	lsls	r3, r1
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	08004040 	.word	0x08004040
 8000bd8:	08004048 	.word	0x08004048

08000bdc <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d01c      	beq.n	8000c28 <LL_TIM_IC_SetActiveInput+0x4c>
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d017      	beq.n	8000c24 <LL_TIM_IC_SetActiveInput+0x48>
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	2b10      	cmp	r3, #16
 8000bf8:	d012      	beq.n	8000c20 <LL_TIM_IC_SetActiveInput+0x44>
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	2b40      	cmp	r3, #64	; 0x40
 8000bfe:	d00d      	beq.n	8000c1c <LL_TIM_IC_SetActiveInput+0x40>
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c06:	d007      	beq.n	8000c18 <LL_TIM_IC_SetActiveInput+0x3c>
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0e:	d101      	bne.n	8000c14 <LL_TIM_IC_SetActiveInput+0x38>
 8000c10:	2305      	movs	r3, #5
 8000c12:	e00a      	b.n	8000c2a <LL_TIM_IC_SetActiveInput+0x4e>
 8000c14:	2306      	movs	r3, #6
 8000c16:	e008      	b.n	8000c2a <LL_TIM_IC_SetActiveInput+0x4e>
 8000c18:	2304      	movs	r3, #4
 8000c1a:	e006      	b.n	8000c2a <LL_TIM_IC_SetActiveInput+0x4e>
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e004      	b.n	8000c2a <LL_TIM_IC_SetActiveInput+0x4e>
 8000c20:	2302      	movs	r3, #2
 8000c22:	e002      	b.n	8000c2a <LL_TIM_IC_SetActiveInput+0x4e>
 8000c24:	2301      	movs	r3, #1
 8000c26:	e000      	b.n	8000c2a <LL_TIM_IC_SetActiveInput+0x4e>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3318      	adds	r3, #24
 8000c30:	4619      	mov	r1, r3
 8000c32:	7dfb      	ldrb	r3, [r7, #23]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <LL_TIM_IC_SetActiveInput+0x90>)
 8000c36:	5cd3      	ldrb	r3, [r2, r3]
 8000c38:	440b      	add	r3, r1
 8000c3a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	490b      	ldr	r1, [pc, #44]	; (8000c70 <LL_TIM_IC_SetActiveInput+0x94>)
 8000c44:	5ccb      	ldrb	r3, [r1, r3]
 8000c46:	4619      	mov	r1, r3
 8000c48:	2303      	movs	r3, #3
 8000c4a:	408b      	lsls	r3, r1
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	401a      	ands	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	0c1b      	lsrs	r3, r3, #16
 8000c54:	7df9      	ldrb	r1, [r7, #23]
 8000c56:	4806      	ldr	r0, [pc, #24]	; (8000c70 <LL_TIM_IC_SetActiveInput+0x94>)
 8000c58:	5c41      	ldrb	r1, [r0, r1]
 8000c5a:	408b      	lsls	r3, r1
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	08004040 	.word	0x08004040
 8000c70:	08004050 	.word	0x08004050

08000c74 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d01c      	beq.n	8000cc0 <LL_TIM_IC_SetPrescaler+0x4c>
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d017      	beq.n	8000cbc <LL_TIM_IC_SetPrescaler+0x48>
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	2b10      	cmp	r3, #16
 8000c90:	d012      	beq.n	8000cb8 <LL_TIM_IC_SetPrescaler+0x44>
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b40      	cmp	r3, #64	; 0x40
 8000c96:	d00d      	beq.n	8000cb4 <LL_TIM_IC_SetPrescaler+0x40>
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c9e:	d007      	beq.n	8000cb0 <LL_TIM_IC_SetPrescaler+0x3c>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca6:	d101      	bne.n	8000cac <LL_TIM_IC_SetPrescaler+0x38>
 8000ca8:	2305      	movs	r3, #5
 8000caa:	e00a      	b.n	8000cc2 <LL_TIM_IC_SetPrescaler+0x4e>
 8000cac:	2306      	movs	r3, #6
 8000cae:	e008      	b.n	8000cc2 <LL_TIM_IC_SetPrescaler+0x4e>
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	e006      	b.n	8000cc2 <LL_TIM_IC_SetPrescaler+0x4e>
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e004      	b.n	8000cc2 <LL_TIM_IC_SetPrescaler+0x4e>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e002      	b.n	8000cc2 <LL_TIM_IC_SetPrescaler+0x4e>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <LL_TIM_IC_SetPrescaler+0x4e>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3318      	adds	r3, #24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <LL_TIM_IC_SetPrescaler+0x90>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	440b      	add	r3, r1
 8000cd2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
 8000cda:	490b      	ldr	r1, [pc, #44]	; (8000d08 <LL_TIM_IC_SetPrescaler+0x94>)
 8000cdc:	5ccb      	ldrb	r3, [r1, r3]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	408b      	lsls	r3, r1
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	0c1b      	lsrs	r3, r3, #16
 8000cec:	7df9      	ldrb	r1, [r7, #23]
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <LL_TIM_IC_SetPrescaler+0x94>)
 8000cf0:	5c41      	ldrb	r1, [r0, r1]
 8000cf2:	408b      	lsls	r3, r1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	601a      	str	r2, [r3, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	371c      	adds	r7, #28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	08004040 	.word	0x08004040
 8000d08:	08004050 	.word	0x08004050

08000d0c <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d01c      	beq.n	8000d58 <LL_TIM_IC_SetFilter+0x4c>
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d017      	beq.n	8000d54 <LL_TIM_IC_SetFilter+0x48>
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2b10      	cmp	r3, #16
 8000d28:	d012      	beq.n	8000d50 <LL_TIM_IC_SetFilter+0x44>
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	2b40      	cmp	r3, #64	; 0x40
 8000d2e:	d00d      	beq.n	8000d4c <LL_TIM_IC_SetFilter+0x40>
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d36:	d007      	beq.n	8000d48 <LL_TIM_IC_SetFilter+0x3c>
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d3e:	d101      	bne.n	8000d44 <LL_TIM_IC_SetFilter+0x38>
 8000d40:	2305      	movs	r3, #5
 8000d42:	e00a      	b.n	8000d5a <LL_TIM_IC_SetFilter+0x4e>
 8000d44:	2306      	movs	r3, #6
 8000d46:	e008      	b.n	8000d5a <LL_TIM_IC_SetFilter+0x4e>
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e006      	b.n	8000d5a <LL_TIM_IC_SetFilter+0x4e>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e004      	b.n	8000d5a <LL_TIM_IC_SetFilter+0x4e>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e002      	b.n	8000d5a <LL_TIM_IC_SetFilter+0x4e>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <LL_TIM_IC_SetFilter+0x4e>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3318      	adds	r3, #24
 8000d60:	4619      	mov	r1, r3
 8000d62:	7dfb      	ldrb	r3, [r7, #23]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <LL_TIM_IC_SetFilter+0x90>)
 8000d66:	5cd3      	ldrb	r3, [r2, r3]
 8000d68:	440b      	add	r3, r1
 8000d6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	490b      	ldr	r1, [pc, #44]	; (8000da0 <LL_TIM_IC_SetFilter+0x94>)
 8000d74:	5ccb      	ldrb	r3, [r1, r3]
 8000d76:	4619      	mov	r1, r3
 8000d78:	23f0      	movs	r3, #240	; 0xf0
 8000d7a:	408b      	lsls	r3, r1
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	401a      	ands	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	7df9      	ldrb	r1, [r7, #23]
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <LL_TIM_IC_SetFilter+0x94>)
 8000d88:	5c41      	ldrb	r1, [r0, r1]
 8000d8a:	408b      	lsls	r3, r1
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	601a      	str	r2, [r3, #0]
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	08004040 	.word	0x08004040
 8000da0:	08004050 	.word	0x08004050

08000da4 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d01c      	beq.n	8000df0 <LL_TIM_IC_SetPolarity+0x4c>
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d017      	beq.n	8000dec <LL_TIM_IC_SetPolarity+0x48>
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b10      	cmp	r3, #16
 8000dc0:	d012      	beq.n	8000de8 <LL_TIM_IC_SetPolarity+0x44>
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2b40      	cmp	r3, #64	; 0x40
 8000dc6:	d00d      	beq.n	8000de4 <LL_TIM_IC_SetPolarity+0x40>
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dce:	d007      	beq.n	8000de0 <LL_TIM_IC_SetPolarity+0x3c>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd6:	d101      	bne.n	8000ddc <LL_TIM_IC_SetPolarity+0x38>
 8000dd8:	2305      	movs	r3, #5
 8000dda:	e00a      	b.n	8000df2 <LL_TIM_IC_SetPolarity+0x4e>
 8000ddc:	2306      	movs	r3, #6
 8000dde:	e008      	b.n	8000df2 <LL_TIM_IC_SetPolarity+0x4e>
 8000de0:	2304      	movs	r3, #4
 8000de2:	e006      	b.n	8000df2 <LL_TIM_IC_SetPolarity+0x4e>
 8000de4:	2303      	movs	r3, #3
 8000de6:	e004      	b.n	8000df2 <LL_TIM_IC_SetPolarity+0x4e>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e002      	b.n	8000df2 <LL_TIM_IC_SetPolarity+0x4e>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <LL_TIM_IC_SetPolarity+0x4e>
 8000df0:	2300      	movs	r3, #0
 8000df2:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6a1a      	ldr	r2, [r3, #32]
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	490a      	ldr	r1, [pc, #40]	; (8000e24 <LL_TIM_IC_SetPolarity+0x80>)
 8000dfc:	5ccb      	ldrb	r3, [r1, r3]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	230a      	movs	r3, #10
 8000e02:	408b      	lsls	r3, r1
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	4906      	ldr	r1, [pc, #24]	; (8000e24 <LL_TIM_IC_SetPolarity+0x80>)
 8000e0c:	5ccb      	ldrb	r3, [r1, r3]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	408b      	lsls	r3, r1
 8000e14:	431a      	orrs	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8000e1a:	bf00      	nop
 8000e1c:	371c      	adds	r7, #28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	08004058 	.word	0x08004058

08000e28 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e3a:	f023 0307 	bic.w	r3, r3, #7
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	609a      	str	r2, [r3, #8]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f023 0207 	bic.w	r2, r3, #7
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	609a      	str	r2, [r3, #8]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	605a      	str	r2, [r3, #4]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ec2:	69da      	ldr	r2, [r3, #28]
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ece:	69da      	ldr	r2, [r3, #28]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000efe:	699a      	ldr	r2, [r3, #24]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4013      	ands	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f7ff ffbb 	bl	8000eb8 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000f42:	2004      	movs	r0, #4
 8000f44:	f7ff ffd0 	bl	8000ee8 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA0-WKUP   ------> TIM2_CH1
  PA1   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000f48:	f240 3303 	movw	r3, #771	; 0x303
 8000f4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4834      	ldr	r0, [pc, #208]	; (8001028 <MX_TIM2_Init+0x110>)
 8000f58:	f001 fac2 	bl	80024e0 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f62:	f7ff ff75 	bl	8000e50 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f70:	f7ff fe34 	bl	8000bdc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2101      	movs	r1, #1
 8000f78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f7c:	f7ff fe7a 	bl	8000c74 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f88:	f7ff fec0 	bl	8000d0c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2101      	movs	r1, #1
 8000f90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f94:	f7ff ff06 	bl	8000da4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000f98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fa2:	f7ff fe1b 	bl	8000bdc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2110      	movs	r1, #16
 8000faa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fae:	f7ff fe61 	bl	8000c74 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2110      	movs	r1, #16
 8000fb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fba:	f7ff fea7 	bl	8000d0c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fc6:	f7ff feed 	bl	8000da4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8000fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd6:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fe6:	f001 fc5d 	bl	80028a4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000fea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fee:	f7ff fd4d 	bl	8000a8c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ff8:	f7ff ff3c 	bl	8000e74 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000ffc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001000:	f7ff ff4a 	bl	8000e98 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8001004:	2101      	movs	r1, #1
 8001006:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800100a:	f7ff fd4e 	bl	8000aaa <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 800100e:	2110      	movs	r1, #16
 8001010:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001014:	f7ff fd49 	bl	8000aaa <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8001018:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800101c:	f7ff fd18 	bl	8000a50 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010800 	.word	0x40010800

0800102c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff ff31 	bl	8000eb8 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001056:	2004      	movs	r0, #4
 8001058:	f7ff ff46 	bl	8000ee8 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  PA7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800105c:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8001060:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001062:	2304      	movs	r3, #4
 8001064:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	463b      	mov	r3, r7
 8001068:	4619      	mov	r1, r3
 800106a:	482c      	ldr	r0, [pc, #176]	; (800111c <MX_TIM3_Init+0xf0>)
 800106c:	f001 fa38 	bl	80024e0 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8001070:	2103      	movs	r1, #3
 8001072:	482b      	ldr	r0, [pc, #172]	; (8001120 <MX_TIM3_Init+0xf4>)
 8001074:	f7ff feec 	bl	8000e50 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800107c:	2101      	movs	r1, #1
 800107e:	4828      	ldr	r0, [pc, #160]	; (8001120 <MX_TIM3_Init+0xf4>)
 8001080:	f7ff fdac 	bl	8000bdc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001084:	2200      	movs	r2, #0
 8001086:	2101      	movs	r1, #1
 8001088:	4825      	ldr	r0, [pc, #148]	; (8001120 <MX_TIM3_Init+0xf4>)
 800108a:	f7ff fdf3 	bl	8000c74 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800108e:	2200      	movs	r2, #0
 8001090:	2101      	movs	r1, #1
 8001092:	4823      	ldr	r0, [pc, #140]	; (8001120 <MX_TIM3_Init+0xf4>)
 8001094:	f7ff fe3a 	bl	8000d0c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001098:	2200      	movs	r2, #0
 800109a:	2101      	movs	r1, #1
 800109c:	4820      	ldr	r0, [pc, #128]	; (8001120 <MX_TIM3_Init+0xf4>)
 800109e:	f7ff fe81 	bl	8000da4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80010a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a6:	2110      	movs	r1, #16
 80010a8:	481d      	ldr	r0, [pc, #116]	; (8001120 <MX_TIM3_Init+0xf4>)
 80010aa:	f7ff fd97 	bl	8000bdc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	481b      	ldr	r0, [pc, #108]	; (8001120 <MX_TIM3_Init+0xf4>)
 80010b4:	f7ff fdde 	bl	8000c74 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2110      	movs	r1, #16
 80010bc:	4818      	ldr	r0, [pc, #96]	; (8001120 <MX_TIM3_Init+0xf4>)
 80010be:	f7ff fe25 	bl	8000d0c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2110      	movs	r1, #16
 80010c6:	4816      	ldr	r0, [pc, #88]	; (8001120 <MX_TIM3_Init+0xf4>)
 80010c8:	f7ff fe6c 	bl	8000da4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 80010d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d8:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <MX_TIM3_Init+0xf4>)
 80010e6:	f001 fbdd 	bl	80028a4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <MX_TIM3_Init+0xf4>)
 80010ec:	f7ff fcbf 	bl	8000a6e <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80010f0:	2100      	movs	r1, #0
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <MX_TIM3_Init+0xf4>)
 80010f4:	f7ff febe 	bl	8000e74 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <MX_TIM3_Init+0xf4>)
 80010fa:	f7ff fecd 	bl	8000e98 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 80010fe:	2101      	movs	r1, #1
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <MX_TIM3_Init+0xf4>)
 8001102:	f7ff fcd2 	bl	8000aaa <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8001106:	2110      	movs	r1, #16
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_TIM3_Init+0xf4>)
 800110a:	f7ff fcce 	bl	8000aaa <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_TIM3_Init+0xf4>)
 8001110:	f7ff fc9e 	bl	8000a50 <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40010800 	.word	0x40010800
 8001120:	40000400 	.word	0x40000400

08001124 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b092      	sub	sp, #72	; 0x48
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800112a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2220      	movs	r2, #32
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fefa 	bl	8002f3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001156:	2004      	movs	r0, #4
 8001158:	f7ff feae 	bl	8000eb8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 3;
 800115c:	2303      	movs	r3, #3
 800115e:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001160:	2300      	movs	r3, #0
 8001162:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <MX_TIM4_Init+0x108>)
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800116c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001170:	4619      	mov	r1, r3
 8001172:	482f      	ldr	r0, [pc, #188]	; (8001230 <MX_TIM4_Init+0x10c>)
 8001174:	f001 fb96 	bl	80028a4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8001178:	482d      	ldr	r0, [pc, #180]	; (8001230 <MX_TIM4_Init+0x10c>)
 800117a:	f7ff fc78 	bl	8000a6e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 800117e:	2100      	movs	r1, #0
 8001180:	482b      	ldr	r0, [pc, #172]	; (8001230 <MX_TIM4_Init+0x10c>)
 8001182:	f7ff fe51 	bl	8000e28 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8001186:	2101      	movs	r1, #1
 8001188:	4829      	ldr	r0, [pc, #164]	; (8001230 <MX_TIM4_Init+0x10c>)
 800118a:	f7ff fce3 	bl	8000b54 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800118e:	2360      	movs	r3, #96	; 0x60
 8001190:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 200;
 800119a:	23c8      	movs	r3, #200	; 0xc8
 800119c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	461a      	mov	r2, r3
 80011a8:	2101      	movs	r1, #1
 80011aa:	4821      	ldr	r0, [pc, #132]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011ac:	f001 fbd8 	bl	8002960 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 80011b0:	2101      	movs	r1, #1
 80011b2:	481f      	ldr	r0, [pc, #124]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011b4:	f7ff fc8a 	bl	8000acc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 80011b8:	2110      	movs	r1, #16
 80011ba:	481d      	ldr	r0, [pc, #116]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011bc:	f7ff fcca 	bl	8000b54 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 800;
 80011c0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80011c4:	623b      	str	r3, [r7, #32]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	461a      	mov	r2, r3
 80011cc:	2110      	movs	r1, #16
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011d0:	f001 fbc6 	bl	8002960 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80011d4:	2110      	movs	r1, #16
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011d8:	f7ff fc78 	bl	8000acc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80011dc:	2100      	movs	r1, #0
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011e0:	f7ff fe48 	bl	8000e74 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011e6:	f7ff fe57 	bl	8000e98 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1);
 80011ea:	2101      	movs	r1, #1
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011ee:	f7ff fc5c 	bl	8000aaa <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH2);
 80011f2:	2110      	movs	r1, #16
 80011f4:	480e      	ldr	r0, [pc, #56]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011f6:	f7ff fc58 	bl	8000aaa <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM4);
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_TIM4_Init+0x10c>)
 80011fc:	f7ff fc28 	bl	8000a50 <LL_TIM_EnableCounter>

  /* USER CODE END TIM4_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001200:	2008      	movs	r0, #8
 8001202:	f7ff fe71 	bl	8000ee8 <LL_APB2_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001206:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 800120a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800120c:	2309      	movs	r3, #9
 800120e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8001210:	2301      	movs	r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_TIM4_Init+0x110>)
 800121e:	f001 f95f 	bl	80024e0 <LL_GPIO_Init>

}
 8001222:	bf00      	nop
 8001224:	3748      	adds	r7, #72	; 0x48
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	fff003e8 	.word	0xfff003e8
 8001230:	40000800 	.word	0x40000800
 8001234:	40010c00 	.word	0x40010c00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4906      	ldr	r1, [pc, #24]	; (8001288 <__NVIC_EnableIRQ+0x34>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <LL_USART_Enable>:
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <LL_USART_ConfigAsyncMode>:
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	615a      	str	r2, [r3, #20]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <LL_APB1_GRP1_EnableClock>:
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001396:	69da      	ldr	r2, [r3, #28]
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4313      	orrs	r3, r2
 800139e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013a2:	69da      	ldr	r2, [r3, #28]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4013      	ands	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <LL_APB2_GRP1_EnableClock>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013d2:	699a      	ldr	r2, [r3, #24]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4013      	ands	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	; 0x30
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001414:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001418:	f7ff ffd0 	bl	80013bc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800141c:	2004      	movs	r0, #4
 800141e:	f7ff ffcd 	bl	80013bc <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <MX_USART1_UART_Init+0xc4>)
 8001424:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001426:	2309      	movs	r3, #9
 8001428:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	481f      	ldr	r0, [pc, #124]	; (80014b4 <MX_USART1_UART_Init+0xc8>)
 8001438:	f001 f852 	bl	80024e0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_USART1_UART_Init+0xcc>)
 800143e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001440:	2308      	movs	r3, #8
 8001442:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001444:	2301      	movs	r3, #1
 8001446:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4819      	ldr	r0, [pc, #100]	; (80014b4 <MX_USART1_UART_Init+0xc8>)
 800144e:	f001 f847 	bl	80024e0 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001452:	f7ff fef1 	bl	8001238 <__NVIC_GetPriorityGrouping>
 8001456:	4603      	mov	r3, r0
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff3f 	bl	80012e0 <NVIC_EncodePriority>
 8001462:	4603      	mov	r3, r0
 8001464:	4619      	mov	r1, r3
 8001466:	2025      	movs	r0, #37	; 0x25
 8001468:	f7ff ff10 	bl	800128c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800146c:	2025      	movs	r0, #37	; 0x25
 800146e:	f7ff fef1 	bl	8001254 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8001472:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001476:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001484:	230c      	movs	r3, #12
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4809      	ldr	r0, [pc, #36]	; (80014bc <MX_USART1_UART_Init+0xd0>)
 8001498:	f001 fcc6 	bl	8002e28 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <MX_USART1_UART_Init+0xd0>)
 800149e:	f7ff ff60 	bl	8001362 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_USART1_UART_Init+0xd0>)
 80014a4:	f7ff ff4e 	bl	8001344 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	04020002 	.word	0x04020002
 80014b4:	40010800 	.word	0x40010800
 80014b8:	04040004 	.word	0x04040004
 80014bc:	40013800 	.word	0x40013800

080014c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	615a      	str	r2, [r3, #20]
 80014d8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80014e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014ec:	f7ff ff4e 	bl	800138c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80014f0:	2004      	movs	r0, #4
 80014f2:	f7ff ff63 	bl	80013bc <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80014f6:	f240 4304 	movw	r3, #1028	; 0x404
 80014fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014fc:	2309      	movs	r3, #9
 80014fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	481e      	ldr	r0, [pc, #120]	; (8001588 <MX_USART2_UART_Init+0xc8>)
 800150e:	f000 ffe7 	bl	80024e0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001512:	f640 0308 	movw	r3, #2056	; 0x808
 8001516:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001518:	2308      	movs	r3, #8
 800151a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4818      	ldr	r0, [pc, #96]	; (8001588 <MX_USART2_UART_Init+0xc8>)
 8001526:	f000 ffdb 	bl	80024e0 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800152a:	f7ff fe85 	bl	8001238 <__NVIC_GetPriorityGrouping>
 800152e:	4603      	mov	r3, r0
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fed3 	bl	80012e0 <NVIC_EncodePriority>
 800153a:	4603      	mov	r3, r0
 800153c:	4619      	mov	r1, r3
 800153e:	2026      	movs	r0, #38	; 0x26
 8001540:	f7ff fea4 	bl	800128c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001544:	2026      	movs	r0, #38	; 0x26
 8001546:	f7ff fe85 	bl	8001254 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 800154a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800154e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800155c:	230c      	movs	r3, #12
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_USART2_UART_Init+0xcc>)
 8001570:	f001 fc5a 	bl	8002e28 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART2_UART_Init+0xcc>)
 8001576:	f7ff fef4 	bl	8001362 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_USART2_UART_Init+0xcc>)
 800157c:	f7ff fee2 	bl	8001344 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3730      	adds	r7, #48	; 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40010800 	.word	0x40010800
 800158c:	40004400 	.word	0x40004400

08001590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	; (80015c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015b6:	f7ff fa45 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ba:	f001 fc9b 	bl	8002ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015be:	f7ff f89b 	bl	80006f8 <main>
  bx lr
 80015c2:	4770      	bx	lr
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80015cc:	08004100 	.word	0x08004100
  ldr r2, =_sbss
 80015d0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80015d4:	20000260 	.word	0x20000260

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x28>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x28>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f907 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff f91e 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40022000 	.word	0x40022000

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f911 	bl	800184e <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f8e7 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000010 	.word	0x20000010
 8001660:	20000018 	.word	0x20000018
 8001664:	20000014 	.word	0x20000014

08001668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_IncTick+0x1c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x20>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a03      	ldr	r2, [pc, #12]	; (8001688 <HAL_IncTick+0x20>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000018 	.word	0x20000018
 8001688:	2000024c 	.word	0x2000024c

0800168c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <HAL_GetTick+0x10>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	2000024c 	.word	0x2000024c

080016a0 <__NVIC_SetPriorityGrouping>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_SetPriority>:
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f7ff ff90 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff49 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff5e 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff90 	bl	8001758 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5f 	bl	8001704 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffb0 	bl	80017bc <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b08b      	sub	sp, #44	; 0x2c
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e169      	b.n	8001b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800187c:	2201      	movs	r2, #1
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 8158 	bne.w	8001b4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a9a      	ldr	r2, [pc, #616]	; (8001b08 <HAL_GPIO_Init+0x2a0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d05e      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018a4:	4a98      	ldr	r2, [pc, #608]	; (8001b08 <HAL_GPIO_Init+0x2a0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d875      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018aa:	4a98      	ldr	r2, [pc, #608]	; (8001b0c <HAL_GPIO_Init+0x2a4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d058      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018b0:	4a96      	ldr	r2, [pc, #600]	; (8001b0c <HAL_GPIO_Init+0x2a4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d86f      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018b6:	4a96      	ldr	r2, [pc, #600]	; (8001b10 <HAL_GPIO_Init+0x2a8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d052      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018bc:	4a94      	ldr	r2, [pc, #592]	; (8001b10 <HAL_GPIO_Init+0x2a8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d869      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018c2:	4a94      	ldr	r2, [pc, #592]	; (8001b14 <HAL_GPIO_Init+0x2ac>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d04c      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018c8:	4a92      	ldr	r2, [pc, #584]	; (8001b14 <HAL_GPIO_Init+0x2ac>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d863      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018ce:	4a92      	ldr	r2, [pc, #584]	; (8001b18 <HAL_GPIO_Init+0x2b0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d046      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018d4:	4a90      	ldr	r2, [pc, #576]	; (8001b18 <HAL_GPIO_Init+0x2b0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d85d      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018da:	2b12      	cmp	r3, #18
 80018dc:	d82a      	bhi.n	8001934 <HAL_GPIO_Init+0xcc>
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d859      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018e2:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <HAL_GPIO_Init+0x80>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	08001963 	.word	0x08001963
 80018ec:	0800193d 	.word	0x0800193d
 80018f0:	0800194f 	.word	0x0800194f
 80018f4:	08001991 	.word	0x08001991
 80018f8:	08001997 	.word	0x08001997
 80018fc:	08001997 	.word	0x08001997
 8001900:	08001997 	.word	0x08001997
 8001904:	08001997 	.word	0x08001997
 8001908:	08001997 	.word	0x08001997
 800190c:	08001997 	.word	0x08001997
 8001910:	08001997 	.word	0x08001997
 8001914:	08001997 	.word	0x08001997
 8001918:	08001997 	.word	0x08001997
 800191c:	08001997 	.word	0x08001997
 8001920:	08001997 	.word	0x08001997
 8001924:	08001997 	.word	0x08001997
 8001928:	08001997 	.word	0x08001997
 800192c:	08001945 	.word	0x08001945
 8001930:	08001959 	.word	0x08001959
 8001934:	4a79      	ldr	r2, [pc, #484]	; (8001b1c <HAL_GPIO_Init+0x2b4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800193a:	e02c      	b.n	8001996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e029      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	3304      	adds	r3, #4
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e024      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	3308      	adds	r3, #8
 8001954:	623b      	str	r3, [r7, #32]
          break;
 8001956:	e01f      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	330c      	adds	r3, #12
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e01a      	b.n	8001998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800196a:	2304      	movs	r3, #4
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e013      	b.n	8001998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001978:	2308      	movs	r3, #8
 800197a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	611a      	str	r2, [r3, #16]
          break;
 8001982:	e009      	b.n	8001998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	615a      	str	r2, [r3, #20]
          break;
 800198e:	e003      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x130>
          break;
 8001996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2bff      	cmp	r3, #255	; 0xff
 800199c:	d801      	bhi.n	80019a2 <HAL_GPIO_Init+0x13a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	e001      	b.n	80019a6 <HAL_GPIO_Init+0x13e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3304      	adds	r3, #4
 80019a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2bff      	cmp	r3, #255	; 0xff
 80019ac:	d802      	bhi.n	80019b4 <HAL_GPIO_Init+0x14c>
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x152>
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	3b08      	subs	r3, #8
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	210f      	movs	r1, #15
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	6a39      	ldr	r1, [r7, #32]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80b1 	beq.w	8001b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e8:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_GPIO_Init+0x2b8>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_GPIO_Init+0x2b8>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_GPIO_Init+0x2b8>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a00:	4a48      	ldr	r2, [pc, #288]	; (8001b24 <HAL_GPIO_Init+0x2bc>)
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a40      	ldr	r2, [pc, #256]	; (8001b28 <HAL_GPIO_Init+0x2c0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d013      	beq.n	8001a54 <HAL_GPIO_Init+0x1ec>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a3f      	ldr	r2, [pc, #252]	; (8001b2c <HAL_GPIO_Init+0x2c4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00d      	beq.n	8001a50 <HAL_GPIO_Init+0x1e8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a3e      	ldr	r2, [pc, #248]	; (8001b30 <HAL_GPIO_Init+0x2c8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d007      	beq.n	8001a4c <HAL_GPIO_Init+0x1e4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a3d      	ldr	r2, [pc, #244]	; (8001b34 <HAL_GPIO_Init+0x2cc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_GPIO_Init+0x1e0>
 8001a44:	2303      	movs	r3, #3
 8001a46:	e006      	b.n	8001a56 <HAL_GPIO_Init+0x1ee>
 8001a48:	2304      	movs	r3, #4
 8001a4a:	e004      	b.n	8001a56 <HAL_GPIO_Init+0x1ee>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x1ee>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_GPIO_Init+0x1ee>
 8001a54:	2300      	movs	r3, #0
 8001a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	4093      	lsls	r3, r2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a66:	492f      	ldr	r1, [pc, #188]	; (8001b24 <HAL_GPIO_Init+0x2bc>)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a80:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	492c      	ldr	r1, [pc, #176]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4928      	ldr	r1, [pc, #160]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4922      	ldr	r1, [pc, #136]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	491e      	ldr	r1, [pc, #120]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	4918      	ldr	r1, [pc, #96]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4914      	ldr	r1, [pc, #80]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d021      	beq.n	8001b3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	490e      	ldr	r1, [pc, #56]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60cb      	str	r3, [r1, #12]
 8001b04:	e021      	b.n	8001b4a <HAL_GPIO_Init+0x2e2>
 8001b06:	bf00      	nop
 8001b08:	10320000 	.word	0x10320000
 8001b0c:	10310000 	.word	0x10310000
 8001b10:	10220000 	.word	0x10220000
 8001b14:	10210000 	.word	0x10210000
 8001b18:	10120000 	.word	0x10120000
 8001b1c:	10110000 	.word	0x10110000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	40011000 	.word	0x40011000
 8001b34:	40011400 	.word	0x40011400
 8001b38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_GPIO_Init+0x304>)
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4909      	ldr	r1, [pc, #36]	; (8001b6c <HAL_GPIO_Init+0x304>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f47f ae8e 	bne.w	800187c <HAL_GPIO_Init+0x14>
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	372c      	adds	r7, #44	; 0x2c
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8c:	e003      	b.n	8001b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	041a      	lsls	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e26c      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8087 	beq.w	8001cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc0:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d00c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bcc:	4b8f      	ldr	r3, [pc, #572]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d112      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5e>
 8001bd8:	4b8c      	ldr	r3, [pc, #560]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	4b89      	ldr	r3, [pc, #548]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d06c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x12c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d168      	bne.n	8001ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e246      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x76>
 8001c08:	4b80      	ldr	r3, [pc, #512]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a7f      	ldr	r2, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e02e      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x98>
 8001c1e:	4b7b      	ldr	r3, [pc, #492]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7a      	ldr	r2, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b78      	ldr	r3, [pc, #480]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a77      	ldr	r2, [pc, #476]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0xbc>
 8001c42:	4b72      	ldr	r3, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a71      	ldr	r2, [pc, #452]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6e      	ldr	r2, [pc, #440]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c5c:	4b6b      	ldr	r3, [pc, #428]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6a      	ldr	r2, [pc, #424]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b68      	ldr	r3, [pc, #416]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a67      	ldr	r2, [pc, #412]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fd06 	bl	800168c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fd02 	bl	800168c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1fa      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xe4>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fcf2 	bl	800168c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fcee 	bl	800168c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1e6      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x10c>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cda:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce6:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x18c>
 8001cf2:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x176>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1ba      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4939      	ldr	r1, [pc, #228]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_RCC_OscConfig+0x270>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fca7 	bl	800168c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff fca3 	bl	800168c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e19b      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4927      	ldr	r1, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_RCC_OscConfig+0x270>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fc86 	bl	800168c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff fc82 	bl	800168c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e17a      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03a      	beq.n	8001e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d019      	beq.n	8001dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_RCC_OscConfig+0x274>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fc66 	bl	800168c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fc62 	bl	800168c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e15a      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 faa6 	bl	8002334 <RCC_Delay>
 8001de8:	e01c      	b.n	8001e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_RCC_OscConfig+0x274>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fc4c 	bl	800168c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df6:	e00f      	b.n	8001e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff fc48 	bl	800168c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d908      	bls.n	8001e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e140      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	42420000 	.word	0x42420000
 8001e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4b9e      	ldr	r3, [pc, #632]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e9      	bne.n	8001df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80a6 	beq.w	8001f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b97      	ldr	r3, [pc, #604]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10d      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b94      	ldr	r3, [pc, #592]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a93      	ldr	r2, [pc, #588]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]
 8001e4e:	4b91      	ldr	r3, [pc, #580]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b8e      	ldr	r3, [pc, #568]	; (8002098 <HAL_RCC_OscConfig+0x4f8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6a:	4b8b      	ldr	r3, [pc, #556]	; (8002098 <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a8a      	ldr	r2, [pc, #552]	; (8002098 <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fc09 	bl	800168c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7ff fc05 	bl	800168c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	; 0x64
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0fd      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	4b81      	ldr	r3, [pc, #516]	; (8002098 <HAL_RCC_OscConfig+0x4f8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x312>
 8001ea4:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a7a      	ldr	r2, [pc, #488]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e02d      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x334>
 8001eba:	4b76      	ldr	r3, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a75      	ldr	r2, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b73      	ldr	r3, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a72      	ldr	r2, [pc, #456]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
 8001ed2:	e01c      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d10c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x356>
 8001edc:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a6c      	ldr	r2, [pc, #432]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a69      	ldr	r2, [pc, #420]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e00b      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a66      	ldr	r2, [pc, #408]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	4b64      	ldr	r3, [pc, #400]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a63      	ldr	r2, [pc, #396]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d015      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fbb9 	bl	800168c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fbb5 	bl	800168c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0ab      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	4b57      	ldr	r3, [pc, #348]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ee      	beq.n	8001f1e <HAL_RCC_OscConfig+0x37e>
 8001f40:	e014      	b.n	8001f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fba3 	bl	800168c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff fb9f 	bl	800168c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e095      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b48      	ldr	r3, [pc, #288]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a47      	ldr	r2, [pc, #284]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8081 	beq.w	800208a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d061      	beq.n	8002058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d146      	bne.n	800202a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <HAL_RCC_OscConfig+0x4fc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fb73 	bl	800168c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7ff fb6f 	bl	800168c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e067      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd0:	d108      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	492d      	ldr	r1, [pc, #180]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a19      	ldr	r1, [r3, #32]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	4927      	ldr	r1, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_RCC_OscConfig+0x4fc>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7ff fb43 	bl	800168c <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200a:	f7ff fb3f 	bl	800168c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e037      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x46a>
 8002028:	e02f      	b.n	800208a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_RCC_OscConfig+0x4fc>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fb2c 	bl	800168c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff fb28 	bl	800168c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e020      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x498>
 8002056:	e018      	b.n	800208a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e013      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	40007000 	.word	0x40007000
 800209c:	42420060 	.word	0x42420060

080020a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d0      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4965      	ldr	r1, [pc, #404]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a52      	ldr	r2, [pc, #328]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800211e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e073      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4936      	ldr	r1, [pc, #216]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7ff fa7c 	bl	800168c <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7ff fa78 	bl	800168c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e053      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d210      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4922      	ldr	r1, [pc, #136]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1d0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f9da 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000
 8002264:	40021000 	.word	0x40021000
 8002268:	08004028 	.word	0x08004028
 800226c:	20000010 	.word	0x20000010
 8002270:	20000014 	.word	0x20000014

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b490      	push	{r4, r7}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb0>)
 800227c:	1d3c      	adds	r4, r7, #4
 800227e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002284:	f240 2301 	movw	r3, #513	; 0x201
 8002288:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x40>
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d003      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x46>
 80022b2:	e02d      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b6:	623b      	str	r3, [r7, #32]
      break;
 80022b8:	e02d      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	0c9b      	lsrs	r3, r3, #18
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022c6:	4413      	add	r3, r2
 80022c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0c5b      	lsrs	r3, r3, #17
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022e6:	4413      	add	r3, r2
 80022e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f2:	fb02 f203 	mul.w	r2, r2, r3
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	e004      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002304:	fb02 f303 	mul.w	r3, r2, r3
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	623b      	str	r3, [r7, #32]
      break;
 800230e:	e002      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002312:	623b      	str	r3, [r7, #32]
      break;
 8002314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002316:	6a3b      	ldr	r3, [r7, #32]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bc90      	pop	{r4, r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	08004018 	.word	0x08004018
 8002328:	40021000 	.word	0x40021000
 800232c:	007a1200 	.word	0x007a1200
 8002330:	003d0900 	.word	0x003d0900

08002334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <RCC_Delay+0x34>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <RCC_Delay+0x38>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0a5b      	lsrs	r3, r3, #9
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002350:	bf00      	nop
  }
  while (Delay --);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e5a      	subs	r2, r3, #1
 8002356:	60fa      	str	r2, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <RCC_Delay+0x1c>
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	20000010 	.word	0x20000010
 800236c:	10624dd3 	.word	0x10624dd3

08002370 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002370:	b490      	push	{r4, r7}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	0e1b      	lsrs	r3, r3, #24
 8002384:	4413      	add	r3, r2
 8002386:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	210f      	movs	r1, #15
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	401a      	ands	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	61bb      	str	r3, [r7, #24]
  return result;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	6023      	str	r3, [r4, #0]
}
 80023ca:	bf00      	nop
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc90      	pop	{r4, r7}
 80023d2:	4770      	bx	lr

080023d4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80023d4:	b490      	push	{r4, r7}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	0e1b      	lsrs	r3, r3, #24
 80023e8:	4413      	add	r3, r2
 80023ea:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80023ec:	6822      	ldr	r2, [r4, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	613b      	str	r3, [r7, #16]
  return result;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	2103      	movs	r1, #3
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	401a      	ands	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	61bb      	str	r3, [r7, #24]
  return result;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800242e:	bf00      	nop
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bc90      	pop	{r4, r7}
 8002436:	4770      	bx	lr

08002438 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8002438:	b490      	push	{r4, r7}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	461a      	mov	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	0e1b      	lsrs	r3, r3, #24
 800244c:	4413      	add	r3, r2
 800244e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002450:	6822      	ldr	r2, [r4, #0]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	613b      	str	r3, [r7, #16]
  return result;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	2104      	movs	r1, #4
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	401a      	ands	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	61bb      	str	r3, [r7, #24]
  return result;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8002492:	bf00      	nop
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bc90      	pop	{r4, r7}
 800249a:	4770      	bx	lr

0800249c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	43db      	mvns	r3, r3
 80024b2:	401a      	ands	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	613b      	str	r3, [r7, #16]
  return result;
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	408b      	lsls	r3, r1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	60da      	str	r2, [r3, #12]
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	60fb      	str	r3, [r7, #12]
  return result;
 8002500:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800250a:	e044      	b.n	8002596 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	409a      	lsls	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03a      	beq.n	8002590 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	2b07      	cmp	r3, #7
 800251e:	d806      	bhi.n	800252e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002520:	f240 1201 	movw	r2, #257	; 0x101
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e008      	b.n	8002540 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b08      	subs	r3, #8
 8002532:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800253e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d106      	bne.n	8002556 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	461a      	mov	r2, r3
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ffa3 	bl	800249c <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	461a      	mov	r2, r3
 800255c:	69b9      	ldr	r1, [r7, #24]
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ff06 	bl	8002370 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d003      	beq.n	8002574 <LL_GPIO_Init+0x94>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b09      	cmp	r3, #9
 8002572:	d10d      	bne.n	8002590 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	461a      	mov	r2, r3
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff29 	bl	80023d4 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	461a      	mov	r2, r3
 8002588:	69b9      	ldr	r1, [r7, #24]
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ff54 	bl	8002438 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	3301      	adds	r3, #1
 8002594:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1b4      	bne.n	800250c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <LL_RCC_GetSysClkSource+0x14>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40021000 	.word	0x40021000

080025c4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <LL_RCC_GetAHBPrescaler+0x14>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40021000 	.word	0x40021000

080025dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	40021000 	.word	0x40021000

080025f4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <LL_RCC_GetAPB2Prescaler+0x14>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40021000 	.word	0x40021000

0800260c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <LL_RCC_PLL_GetMainSource+0x14>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000

08002624 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40021000 	.word	0x40021000

0800263c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <LL_RCC_PLL_GetPrediv+0x18>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	0c5b      	lsrs	r3, r3, #17
 8002646:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002660:	f000 f820 	bl	80026a4 <RCC_GetSystemClockFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f83e 	bl	80026f0 <RCC_GetHCLKClockFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f84c 	bl	800271c <RCC_GetPCLK1ClockFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f858 	bl	8002744 <RCC_GetPCLK2ClockFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60da      	str	r2, [r3, #12]
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80026ae:	f7ff ff7d 	bl	80025ac <LL_RCC_GetSysClkSource>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d00c      	beq.n	80026d2 <RCC_GetSystemClockFreq+0x2e>
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d80e      	bhi.n	80026da <RCC_GetSystemClockFreq+0x36>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <RCC_GetSystemClockFreq+0x22>
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d003      	beq.n	80026cc <RCC_GetSystemClockFreq+0x28>
 80026c4:	e009      	b.n	80026da <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <RCC_GetSystemClockFreq+0x48>)
 80026c8:	607b      	str	r3, [r7, #4]
      break;
 80026ca:	e009      	b.n	80026e0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <RCC_GetSystemClockFreq+0x48>)
 80026ce:	607b      	str	r3, [r7, #4]
      break;
 80026d0:	e006      	b.n	80026e0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80026d2:	f000 f84b 	bl	800276c <RCC_PLL_GetFreqDomain_SYS>
 80026d6:	6078      	str	r0, [r7, #4]
      break;
 80026d8:	e002      	b.n	80026e0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <RCC_GetSystemClockFreq+0x48>)
 80026dc:	607b      	str	r3, [r7, #4]
      break;
 80026de:	bf00      	nop
  }

  return frequency;
 80026e0:	687b      	ldr	r3, [r7, #4]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	007a1200 	.word	0x007a1200

080026f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80026f8:	f7ff ff64 	bl	80025c4 <LL_RCC_GetAHBPrescaler>
 80026fc:	4603      	mov	r3, r0
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <RCC_GetHCLKClockFreq+0x28>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	461a      	mov	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	40d3      	lsrs	r3, r2
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	08004028 	.word	0x08004028

0800271c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002724:	f7ff ff5a 	bl	80025dc <LL_RCC_GetAPB1Prescaler>
 8002728:	4603      	mov	r3, r0
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <RCC_GetPCLK1ClockFreq+0x24>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	461a      	mov	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	40d3      	lsrs	r3, r2
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	08004038 	.word	0x08004038

08002744 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800274c:	f7ff ff52 	bl	80025f4 <LL_RCC_GetAPB2Prescaler>
 8002750:	4603      	mov	r3, r0
 8002752:	0adb      	lsrs	r3, r3, #11
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <RCC_GetPCLK2ClockFreq+0x24>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	461a      	mov	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	40d3      	lsrs	r3, r2
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	08004038 	.word	0x08004038

0800276c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800277a:	f7ff ff47 	bl	800260c <LL_RCC_PLL_GetMainSource>
 800277e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d004      	beq.n	8002790 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d003      	beq.n	8002796 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800278e:	e00b      	b.n	80027a8 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002790:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002792:	607b      	str	r3, [r7, #4]
      break;
 8002794:	e00b      	b.n	80027ae <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002796:	f7ff ff51 	bl	800263c <LL_RCC_PLL_GetPrediv>
 800279a:	4603      	mov	r3, r0
 800279c:	3301      	adds	r3, #1
 800279e:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	607b      	str	r3, [r7, #4]
      break;
 80027a6:	e002      	b.n	80027ae <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80027aa:	607b      	str	r3, [r7, #4]
      break;
 80027ac:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80027ae:	f7ff ff39 	bl	8002624 <LL_RCC_PLL_GetMultiplicator>
 80027b2:	4603      	mov	r3, r0
 80027b4:	0c9b      	lsrs	r3, r3, #18
 80027b6:	3302      	adds	r3, #2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	003d0900 	.word	0x003d0900
 80027cc:	007a1200 	.word	0x007a1200

080027d0 <LL_TIM_SetPrescaler>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <LL_TIM_SetAutoReload>:
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <LL_TIM_SetRepetitionCounter>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <LL_TIM_OC_SetCompareCH1>:
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <LL_TIM_OC_SetCompareCH2>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <LL_TIM_OC_SetCompareCH3>:
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <LL_TIM_OC_SetCompareCH4>:
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	615a      	str	r2, [r3, #20]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a27      	ldr	r2, [pc, #156]	; (8002954 <LL_TIM_Init+0xb0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <LL_TIM_Init+0x30>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d007      	beq.n	80028d4 <LL_TIM_Init+0x30>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a24      	ldr	r2, [pc, #144]	; (8002958 <LL_TIM_Init+0xb4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <LL_TIM_Init+0x30>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a23      	ldr	r2, [pc, #140]	; (800295c <LL_TIM_Init+0xb8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d106      	bne.n	80028e2 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <LL_TIM_Init+0xb0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00b      	beq.n	8002902 <LL_TIM_Init+0x5e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f0:	d007      	beq.n	8002902 <LL_TIM_Init+0x5e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a18      	ldr	r2, [pc, #96]	; (8002958 <LL_TIM_Init+0xb4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <LL_TIM_Init+0x5e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <LL_TIM_Init+0xb8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d106      	bne.n	8002910 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4619      	mov	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff64 	bl	80027ea <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff51 	bl	80027d0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a08      	ldr	r2, [pc, #32]	; (8002954 <LL_TIM_Init+0xb0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d105      	bne.n	8002942 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ff61 	bl	8002804 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ff9f 	bl	8002886 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800

08002960 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002976:	d027      	beq.n	80029c8 <LL_TIM_OC_Init+0x68>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297e:	d82a      	bhi.n	80029d6 <LL_TIM_OC_Init+0x76>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002986:	d018      	beq.n	80029ba <LL_TIM_OC_Init+0x5a>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	d822      	bhi.n	80029d6 <LL_TIM_OC_Init+0x76>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d003      	beq.n	800299e <LL_TIM_OC_Init+0x3e>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b10      	cmp	r3, #16
 800299a:	d007      	beq.n	80029ac <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800299c:	e01b      	b.n	80029d6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f81f 	bl	80029e4 <OC1Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	75fb      	strb	r3, [r7, #23]
      break;
 80029aa:	e015      	b.n	80029d8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f87e 	bl	8002ab0 <OC2Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	75fb      	strb	r3, [r7, #23]
      break;
 80029b8:	e00e      	b.n	80029d8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f8e1 	bl	8002b84 <OC3Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	75fb      	strb	r3, [r7, #23]
      break;
 80029c6:	e007      	b.n	80029d8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f944 	bl	8002c58 <OC4Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	75fb      	strb	r3, [r7, #23]
      break;
 80029d4:	e000      	b.n	80029d8 <LL_TIM_OC_Init+0x78>
      break;
 80029d6:	bf00      	nop
  }

  return result;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f023 0201 	bic.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f023 0202 	bic.w	r2, r3, #2
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <OC1Config+0xc8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d11e      	bne.n	8002a84 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 0208 	bic.w	r2, r3, #8
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f023 0204 	bic.w	r2, r3, #4
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fec1 	bl	800281e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40012c00 	.word	0x40012c00

08002ab0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0210 	bic.w	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 0220 	bic.w	r2, r3, #32
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0210 	bic.w	r2, r3, #16
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <OC2Config+0xd0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d11f      	bne.n	8002b58 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	019b      	lsls	r3, r3, #6
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	019b      	lsls	r3, r3, #6
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fe64 	bl	8002838 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40012c00 	.word	0x40012c00

08002b84 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <OC3Config+0xd0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d11f      	bne.n	8002c2a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	029b      	lsls	r3, r3, #10
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	029b      	lsls	r3, r3, #10
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	015b      	lsls	r3, r3, #5
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fe08 	bl	8002852 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40012c00 	.word	0x40012c00

08002c58 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	031b      	lsls	r3, r3, #12
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	031b      	lsls	r3, r3, #12
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <OC4Config+0xa0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d107      	bne.n	8002cd0 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	019b      	lsls	r3, r3, #6
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff fdc2 	bl	800286c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40012c00 	.word	0x40012c00

08002cfc <LL_USART_IsEnabled>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d10:	bf0c      	ite	eq
 8002d12:	2301      	moveq	r3, #1
 8002d14:	2300      	movne	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <LL_USART_SetStopBitsLength>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	611a      	str	r2, [r3, #16]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <LL_USART_SetHWFlowCtrl>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	615a      	str	r2, [r3, #20]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
	...

08002d6c <LL_USART_SetBaudRate>:
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009a      	lsls	r2, r3, #2
 8002d82:	441a      	add	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	4a25      	ldr	r2, [pc, #148]	; (8002e24 <LL_USART_SetBaudRate+0xb8>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	b299      	uxth	r1, r3
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009a      	lsls	r2, r3, #2
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <LL_USART_SetBaudRate+0xb8>)
 8002db0:	fba3 0302 	umull	r0, r3, r3, r2
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	2064      	movs	r0, #100	; 0x64
 8002db8:	fb00 f303 	mul.w	r3, r0, r3
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	3332      	adds	r3, #50	; 0x32
 8002dc2:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <LL_USART_SetBaudRate+0xb8>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	009a      	lsls	r2, r3, #2
 8002de0:	441a      	add	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <LL_USART_SetBaudRate+0xb8>)
 8002dec:	fba3 0302 	umull	r0, r3, r3, r2
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	2064      	movs	r0, #100	; 0x64
 8002df4:	fb00 f303 	mul.w	r3, r0, r3
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	3332      	adds	r3, #50	; 0x32
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <LL_USART_SetBaudRate+0xb8>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	440b      	add	r3, r1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	51eb851f 	.word	0x51eb851f

08002e28 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ff5e 	bl	8002cfc <LL_USART_IsEnabled>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d145      	bne.n	8002ed2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e4e:	f023 030c 	bic.w	r3, r3, #12
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	6851      	ldr	r1, [r2, #4]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	6912      	ldr	r2, [r2, #16]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ff57 	bl	8002d22 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff63 	bl	8002d46 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002e80:	f107 0308 	add.w	r3, r7, #8
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fbe7 	bl	8002658 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a13      	ldr	r2, [pc, #76]	; (8002edc <LL_USART_Init+0xb4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d102      	bne.n	8002e98 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e00c      	b.n	8002eb2 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <LL_USART_Init+0xb8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d102      	bne.n	8002ea6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	e005      	b.n	8002eb2 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <LL_USART_Init+0xbc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	69b9      	ldr	r1, [r7, #24]
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ff4d 	bl	8002d6c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3720      	adds	r7, #32
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	40004800 	.word	0x40004800

08002ee8 <__errno>:
 8002ee8:	4b01      	ldr	r3, [pc, #4]	; (8002ef0 <__errno+0x8>)
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	2000001c 	.word	0x2000001c

08002ef4 <__libc_init_array>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	4d0c      	ldr	r5, [pc, #48]	; (8002f2c <__libc_init_array+0x38>)
 8002efa:	4c0d      	ldr	r4, [pc, #52]	; (8002f30 <__libc_init_array+0x3c>)
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	42a6      	cmp	r6, r4
 8002f02:	d109      	bne.n	8002f18 <__libc_init_array+0x24>
 8002f04:	f001 f850 	bl	8003fa8 <_init>
 8002f08:	2600      	movs	r6, #0
 8002f0a:	4d0a      	ldr	r5, [pc, #40]	; (8002f34 <__libc_init_array+0x40>)
 8002f0c:	4c0a      	ldr	r4, [pc, #40]	; (8002f38 <__libc_init_array+0x44>)
 8002f0e:	1b64      	subs	r4, r4, r5
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	42a6      	cmp	r6, r4
 8002f14:	d105      	bne.n	8002f22 <__libc_init_array+0x2e>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1c:	4798      	blx	r3
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7ee      	b.n	8002f00 <__libc_init_array+0xc>
 8002f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f26:	4798      	blx	r3
 8002f28:	3601      	adds	r6, #1
 8002f2a:	e7f2      	b.n	8002f12 <__libc_init_array+0x1e>
 8002f2c:	080040f8 	.word	0x080040f8
 8002f30:	080040f8 	.word	0x080040f8
 8002f34:	080040f8 	.word	0x080040f8
 8002f38:	080040fc 	.word	0x080040fc

08002f3c <memset>:
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4402      	add	r2, r0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memset+0xa>
 8002f44:	4770      	bx	lr
 8002f46:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4a:	e7f9      	b.n	8002f40 <memset+0x4>

08002f4c <iprintf>:
 8002f4c:	b40f      	push	{r0, r1, r2, r3}
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <iprintf+0x2c>)
 8002f50:	b513      	push	{r0, r1, r4, lr}
 8002f52:	681c      	ldr	r4, [r3, #0]
 8002f54:	b124      	cbz	r4, 8002f60 <iprintf+0x14>
 8002f56:	69a3      	ldr	r3, [r4, #24]
 8002f58:	b913      	cbnz	r3, 8002f60 <iprintf+0x14>
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f000 f9ee 	bl	800333c <__sinit>
 8002f60:	ab05      	add	r3, sp, #20
 8002f62:	4620      	mov	r0, r4
 8002f64:	9a04      	ldr	r2, [sp, #16]
 8002f66:	68a1      	ldr	r1, [r4, #8]
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	f000 fbc1 	bl	80036f0 <_vfiprintf_r>
 8002f6e:	b002      	add	sp, #8
 8002f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f74:	b004      	add	sp, #16
 8002f76:	4770      	bx	lr
 8002f78:	2000001c 	.word	0x2000001c

08002f7c <setvbuf>:
 8002f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f80:	461d      	mov	r5, r3
 8002f82:	4b5d      	ldr	r3, [pc, #372]	; (80030f8 <setvbuf+0x17c>)
 8002f84:	4604      	mov	r4, r0
 8002f86:	681f      	ldr	r7, [r3, #0]
 8002f88:	460e      	mov	r6, r1
 8002f8a:	4690      	mov	r8, r2
 8002f8c:	b127      	cbz	r7, 8002f98 <setvbuf+0x1c>
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	b913      	cbnz	r3, 8002f98 <setvbuf+0x1c>
 8002f92:	4638      	mov	r0, r7
 8002f94:	f000 f9d2 	bl	800333c <__sinit>
 8002f98:	4b58      	ldr	r3, [pc, #352]	; (80030fc <setvbuf+0x180>)
 8002f9a:	429c      	cmp	r4, r3
 8002f9c:	d167      	bne.n	800306e <setvbuf+0xf2>
 8002f9e:	687c      	ldr	r4, [r7, #4]
 8002fa0:	f1b8 0f02 	cmp.w	r8, #2
 8002fa4:	d006      	beq.n	8002fb4 <setvbuf+0x38>
 8002fa6:	f1b8 0f01 	cmp.w	r8, #1
 8002faa:	f200 809f 	bhi.w	80030ec <setvbuf+0x170>
 8002fae:	2d00      	cmp	r5, #0
 8002fb0:	f2c0 809c 	blt.w	80030ec <setvbuf+0x170>
 8002fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fb6:	07db      	lsls	r3, r3, #31
 8002fb8:	d405      	bmi.n	8002fc6 <setvbuf+0x4a>
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	0598      	lsls	r0, r3, #22
 8002fbe:	d402      	bmi.n	8002fc6 <setvbuf+0x4a>
 8002fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fc2:	f000 fa59 	bl	8003478 <__retarget_lock_acquire_recursive>
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	4638      	mov	r0, r7
 8002fca:	f000 f923 	bl	8003214 <_fflush_r>
 8002fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fd0:	b141      	cbz	r1, 8002fe4 <setvbuf+0x68>
 8002fd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fd6:	4299      	cmp	r1, r3
 8002fd8:	d002      	beq.n	8002fe0 <setvbuf+0x64>
 8002fda:	4638      	mov	r0, r7
 8002fdc:	f000 faba 	bl	8003554 <_free_r>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6363      	str	r3, [r4, #52]	; 0x34
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61a3      	str	r3, [r4, #24]
 8002fe8:	6063      	str	r3, [r4, #4]
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	0619      	lsls	r1, r3, #24
 8002fee:	d503      	bpl.n	8002ff8 <setvbuf+0x7c>
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	6921      	ldr	r1, [r4, #16]
 8002ff4:	f000 faae 	bl	8003554 <_free_r>
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	f1b8 0f02 	cmp.w	r8, #2
 8002ffe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	81a3      	strh	r3, [r4, #12]
 8003008:	d06c      	beq.n	80030e4 <setvbuf+0x168>
 800300a:	ab01      	add	r3, sp, #4
 800300c:	466a      	mov	r2, sp
 800300e:	4621      	mov	r1, r4
 8003010:	4638      	mov	r0, r7
 8003012:	f000 fa33 	bl	800347c <__swhatbuf_r>
 8003016:	89a3      	ldrh	r3, [r4, #12]
 8003018:	4318      	orrs	r0, r3
 800301a:	81a0      	strh	r0, [r4, #12]
 800301c:	2d00      	cmp	r5, #0
 800301e:	d130      	bne.n	8003082 <setvbuf+0x106>
 8003020:	9d00      	ldr	r5, [sp, #0]
 8003022:	4628      	mov	r0, r5
 8003024:	f000 fa8e 	bl	8003544 <malloc>
 8003028:	4606      	mov	r6, r0
 800302a:	2800      	cmp	r0, #0
 800302c:	d155      	bne.n	80030da <setvbuf+0x15e>
 800302e:	f8dd 9000 	ldr.w	r9, [sp]
 8003032:	45a9      	cmp	r9, r5
 8003034:	d14a      	bne.n	80030cc <setvbuf+0x150>
 8003036:	f04f 35ff 	mov.w	r5, #4294967295
 800303a:	2200      	movs	r2, #0
 800303c:	60a2      	str	r2, [r4, #8]
 800303e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003042:	6022      	str	r2, [r4, #0]
 8003044:	6122      	str	r2, [r4, #16]
 8003046:	2201      	movs	r2, #1
 8003048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800304c:	6162      	str	r2, [r4, #20]
 800304e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	07d2      	lsls	r2, r2, #31
 8003056:	81a3      	strh	r3, [r4, #12]
 8003058:	d405      	bmi.n	8003066 <setvbuf+0xea>
 800305a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800305e:	d102      	bne.n	8003066 <setvbuf+0xea>
 8003060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003062:	f000 fa0a 	bl	800347a <__retarget_lock_release_recursive>
 8003066:	4628      	mov	r0, r5
 8003068:	b003      	add	sp, #12
 800306a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <setvbuf+0x184>)
 8003070:	429c      	cmp	r4, r3
 8003072:	d101      	bne.n	8003078 <setvbuf+0xfc>
 8003074:	68bc      	ldr	r4, [r7, #8]
 8003076:	e793      	b.n	8002fa0 <setvbuf+0x24>
 8003078:	4b22      	ldr	r3, [pc, #136]	; (8003104 <setvbuf+0x188>)
 800307a:	429c      	cmp	r4, r3
 800307c:	bf08      	it	eq
 800307e:	68fc      	ldreq	r4, [r7, #12]
 8003080:	e78e      	b.n	8002fa0 <setvbuf+0x24>
 8003082:	2e00      	cmp	r6, #0
 8003084:	d0cd      	beq.n	8003022 <setvbuf+0xa6>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	b913      	cbnz	r3, 8003090 <setvbuf+0x114>
 800308a:	4638      	mov	r0, r7
 800308c:	f000 f956 	bl	800333c <__sinit>
 8003090:	f1b8 0f01 	cmp.w	r8, #1
 8003094:	bf08      	it	eq
 8003096:	89a3      	ldrheq	r3, [r4, #12]
 8003098:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800309c:	bf04      	itt	eq
 800309e:	f043 0301 	orreq.w	r3, r3, #1
 80030a2:	81a3      	strheq	r3, [r4, #12]
 80030a4:	89a2      	ldrh	r2, [r4, #12]
 80030a6:	6026      	str	r6, [r4, #0]
 80030a8:	f012 0308 	ands.w	r3, r2, #8
 80030ac:	d01c      	beq.n	80030e8 <setvbuf+0x16c>
 80030ae:	07d3      	lsls	r3, r2, #31
 80030b0:	bf41      	itttt	mi
 80030b2:	2300      	movmi	r3, #0
 80030b4:	426d      	negmi	r5, r5
 80030b6:	60a3      	strmi	r3, [r4, #8]
 80030b8:	61a5      	strmi	r5, [r4, #24]
 80030ba:	bf58      	it	pl
 80030bc:	60a5      	strpl	r5, [r4, #8]
 80030be:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80030c0:	f015 0501 	ands.w	r5, r5, #1
 80030c4:	d115      	bne.n	80030f2 <setvbuf+0x176>
 80030c6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80030ca:	e7c8      	b.n	800305e <setvbuf+0xe2>
 80030cc:	4648      	mov	r0, r9
 80030ce:	f000 fa39 	bl	8003544 <malloc>
 80030d2:	4606      	mov	r6, r0
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d0ae      	beq.n	8003036 <setvbuf+0xba>
 80030d8:	464d      	mov	r5, r9
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e0:	81a3      	strh	r3, [r4, #12]
 80030e2:	e7d0      	b.n	8003086 <setvbuf+0x10a>
 80030e4:	2500      	movs	r5, #0
 80030e6:	e7a8      	b.n	800303a <setvbuf+0xbe>
 80030e8:	60a3      	str	r3, [r4, #8]
 80030ea:	e7e8      	b.n	80030be <setvbuf+0x142>
 80030ec:	f04f 35ff 	mov.w	r5, #4294967295
 80030f0:	e7b9      	b.n	8003066 <setvbuf+0xea>
 80030f2:	2500      	movs	r5, #0
 80030f4:	e7b7      	b.n	8003066 <setvbuf+0xea>
 80030f6:	bf00      	nop
 80030f8:	2000001c 	.word	0x2000001c
 80030fc:	08004084 	.word	0x08004084
 8003100:	080040a4 	.word	0x080040a4
 8003104:	08004064 	.word	0x08004064

08003108 <__sflush_r>:
 8003108:	898a      	ldrh	r2, [r1, #12]
 800310a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800310e:	4605      	mov	r5, r0
 8003110:	0710      	lsls	r0, r2, #28
 8003112:	460c      	mov	r4, r1
 8003114:	d458      	bmi.n	80031c8 <__sflush_r+0xc0>
 8003116:	684b      	ldr	r3, [r1, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	dc05      	bgt.n	8003128 <__sflush_r+0x20>
 800311c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	dc02      	bgt.n	8003128 <__sflush_r+0x20>
 8003122:	2000      	movs	r0, #0
 8003124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800312a:	2e00      	cmp	r6, #0
 800312c:	d0f9      	beq.n	8003122 <__sflush_r+0x1a>
 800312e:	2300      	movs	r3, #0
 8003130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003134:	682f      	ldr	r7, [r5, #0]
 8003136:	602b      	str	r3, [r5, #0]
 8003138:	d032      	beq.n	80031a0 <__sflush_r+0x98>
 800313a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	075a      	lsls	r2, r3, #29
 8003140:	d505      	bpl.n	800314e <__sflush_r+0x46>
 8003142:	6863      	ldr	r3, [r4, #4]
 8003144:	1ac0      	subs	r0, r0, r3
 8003146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003148:	b10b      	cbz	r3, 800314e <__sflush_r+0x46>
 800314a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800314c:	1ac0      	subs	r0, r0, r3
 800314e:	2300      	movs	r3, #0
 8003150:	4602      	mov	r2, r0
 8003152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003154:	4628      	mov	r0, r5
 8003156:	6a21      	ldr	r1, [r4, #32]
 8003158:	47b0      	blx	r6
 800315a:	1c43      	adds	r3, r0, #1
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	d106      	bne.n	800316e <__sflush_r+0x66>
 8003160:	6829      	ldr	r1, [r5, #0]
 8003162:	291d      	cmp	r1, #29
 8003164:	d82c      	bhi.n	80031c0 <__sflush_r+0xb8>
 8003166:	4a2a      	ldr	r2, [pc, #168]	; (8003210 <__sflush_r+0x108>)
 8003168:	40ca      	lsrs	r2, r1
 800316a:	07d6      	lsls	r6, r2, #31
 800316c:	d528      	bpl.n	80031c0 <__sflush_r+0xb8>
 800316e:	2200      	movs	r2, #0
 8003170:	6062      	str	r2, [r4, #4]
 8003172:	6922      	ldr	r2, [r4, #16]
 8003174:	04d9      	lsls	r1, r3, #19
 8003176:	6022      	str	r2, [r4, #0]
 8003178:	d504      	bpl.n	8003184 <__sflush_r+0x7c>
 800317a:	1c42      	adds	r2, r0, #1
 800317c:	d101      	bne.n	8003182 <__sflush_r+0x7a>
 800317e:	682b      	ldr	r3, [r5, #0]
 8003180:	b903      	cbnz	r3, 8003184 <__sflush_r+0x7c>
 8003182:	6560      	str	r0, [r4, #84]	; 0x54
 8003184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003186:	602f      	str	r7, [r5, #0]
 8003188:	2900      	cmp	r1, #0
 800318a:	d0ca      	beq.n	8003122 <__sflush_r+0x1a>
 800318c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003190:	4299      	cmp	r1, r3
 8003192:	d002      	beq.n	800319a <__sflush_r+0x92>
 8003194:	4628      	mov	r0, r5
 8003196:	f000 f9dd 	bl	8003554 <_free_r>
 800319a:	2000      	movs	r0, #0
 800319c:	6360      	str	r0, [r4, #52]	; 0x34
 800319e:	e7c1      	b.n	8003124 <__sflush_r+0x1c>
 80031a0:	6a21      	ldr	r1, [r4, #32]
 80031a2:	2301      	movs	r3, #1
 80031a4:	4628      	mov	r0, r5
 80031a6:	47b0      	blx	r6
 80031a8:	1c41      	adds	r1, r0, #1
 80031aa:	d1c7      	bne.n	800313c <__sflush_r+0x34>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0c4      	beq.n	800313c <__sflush_r+0x34>
 80031b2:	2b1d      	cmp	r3, #29
 80031b4:	d001      	beq.n	80031ba <__sflush_r+0xb2>
 80031b6:	2b16      	cmp	r3, #22
 80031b8:	d101      	bne.n	80031be <__sflush_r+0xb6>
 80031ba:	602f      	str	r7, [r5, #0]
 80031bc:	e7b1      	b.n	8003122 <__sflush_r+0x1a>
 80031be:	89a3      	ldrh	r3, [r4, #12]
 80031c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c4:	81a3      	strh	r3, [r4, #12]
 80031c6:	e7ad      	b.n	8003124 <__sflush_r+0x1c>
 80031c8:	690f      	ldr	r7, [r1, #16]
 80031ca:	2f00      	cmp	r7, #0
 80031cc:	d0a9      	beq.n	8003122 <__sflush_r+0x1a>
 80031ce:	0793      	lsls	r3, r2, #30
 80031d0:	bf18      	it	ne
 80031d2:	2300      	movne	r3, #0
 80031d4:	680e      	ldr	r6, [r1, #0]
 80031d6:	bf08      	it	eq
 80031d8:	694b      	ldreq	r3, [r1, #20]
 80031da:	eba6 0807 	sub.w	r8, r6, r7
 80031de:	600f      	str	r7, [r1, #0]
 80031e0:	608b      	str	r3, [r1, #8]
 80031e2:	f1b8 0f00 	cmp.w	r8, #0
 80031e6:	dd9c      	ble.n	8003122 <__sflush_r+0x1a>
 80031e8:	4643      	mov	r3, r8
 80031ea:	463a      	mov	r2, r7
 80031ec:	4628      	mov	r0, r5
 80031ee:	6a21      	ldr	r1, [r4, #32]
 80031f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031f2:	47b0      	blx	r6
 80031f4:	2800      	cmp	r0, #0
 80031f6:	dc06      	bgt.n	8003206 <__sflush_r+0xfe>
 80031f8:	89a3      	ldrh	r3, [r4, #12]
 80031fa:	f04f 30ff 	mov.w	r0, #4294967295
 80031fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003202:	81a3      	strh	r3, [r4, #12]
 8003204:	e78e      	b.n	8003124 <__sflush_r+0x1c>
 8003206:	4407      	add	r7, r0
 8003208:	eba8 0800 	sub.w	r8, r8, r0
 800320c:	e7e9      	b.n	80031e2 <__sflush_r+0xda>
 800320e:	bf00      	nop
 8003210:	20400001 	.word	0x20400001

08003214 <_fflush_r>:
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	690b      	ldr	r3, [r1, #16]
 8003218:	4605      	mov	r5, r0
 800321a:	460c      	mov	r4, r1
 800321c:	b913      	cbnz	r3, 8003224 <_fflush_r+0x10>
 800321e:	2500      	movs	r5, #0
 8003220:	4628      	mov	r0, r5
 8003222:	bd38      	pop	{r3, r4, r5, pc}
 8003224:	b118      	cbz	r0, 800322e <_fflush_r+0x1a>
 8003226:	6983      	ldr	r3, [r0, #24]
 8003228:	b90b      	cbnz	r3, 800322e <_fflush_r+0x1a>
 800322a:	f000 f887 	bl	800333c <__sinit>
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <_fflush_r+0x6c>)
 8003230:	429c      	cmp	r4, r3
 8003232:	d11b      	bne.n	800326c <_fflush_r+0x58>
 8003234:	686c      	ldr	r4, [r5, #4]
 8003236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0ef      	beq.n	800321e <_fflush_r+0xa>
 800323e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003240:	07d0      	lsls	r0, r2, #31
 8003242:	d404      	bmi.n	800324e <_fflush_r+0x3a>
 8003244:	0599      	lsls	r1, r3, #22
 8003246:	d402      	bmi.n	800324e <_fflush_r+0x3a>
 8003248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800324a:	f000 f915 	bl	8003478 <__retarget_lock_acquire_recursive>
 800324e:	4628      	mov	r0, r5
 8003250:	4621      	mov	r1, r4
 8003252:	f7ff ff59 	bl	8003108 <__sflush_r>
 8003256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003258:	4605      	mov	r5, r0
 800325a:	07da      	lsls	r2, r3, #31
 800325c:	d4e0      	bmi.n	8003220 <_fflush_r+0xc>
 800325e:	89a3      	ldrh	r3, [r4, #12]
 8003260:	059b      	lsls	r3, r3, #22
 8003262:	d4dd      	bmi.n	8003220 <_fflush_r+0xc>
 8003264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003266:	f000 f908 	bl	800347a <__retarget_lock_release_recursive>
 800326a:	e7d9      	b.n	8003220 <_fflush_r+0xc>
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <_fflush_r+0x70>)
 800326e:	429c      	cmp	r4, r3
 8003270:	d101      	bne.n	8003276 <_fflush_r+0x62>
 8003272:	68ac      	ldr	r4, [r5, #8]
 8003274:	e7df      	b.n	8003236 <_fflush_r+0x22>
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <_fflush_r+0x74>)
 8003278:	429c      	cmp	r4, r3
 800327a:	bf08      	it	eq
 800327c:	68ec      	ldreq	r4, [r5, #12]
 800327e:	e7da      	b.n	8003236 <_fflush_r+0x22>
 8003280:	08004084 	.word	0x08004084
 8003284:	080040a4 	.word	0x080040a4
 8003288:	08004064 	.word	0x08004064

0800328c <std>:
 800328c:	2300      	movs	r3, #0
 800328e:	b510      	push	{r4, lr}
 8003290:	4604      	mov	r4, r0
 8003292:	e9c0 3300 	strd	r3, r3, [r0]
 8003296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800329a:	6083      	str	r3, [r0, #8]
 800329c:	8181      	strh	r1, [r0, #12]
 800329e:	6643      	str	r3, [r0, #100]	; 0x64
 80032a0:	81c2      	strh	r2, [r0, #14]
 80032a2:	6183      	str	r3, [r0, #24]
 80032a4:	4619      	mov	r1, r3
 80032a6:	2208      	movs	r2, #8
 80032a8:	305c      	adds	r0, #92	; 0x5c
 80032aa:	f7ff fe47 	bl	8002f3c <memset>
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <std+0x38>)
 80032b0:	6224      	str	r4, [r4, #32]
 80032b2:	6263      	str	r3, [r4, #36]	; 0x24
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <std+0x3c>)
 80032b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <std+0x40>)
 80032ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <std+0x44>)
 80032be:	6323      	str	r3, [r4, #48]	; 0x30
 80032c0:	bd10      	pop	{r4, pc}
 80032c2:	bf00      	nop
 80032c4:	08003c9d 	.word	0x08003c9d
 80032c8:	08003cbf 	.word	0x08003cbf
 80032cc:	08003cf7 	.word	0x08003cf7
 80032d0:	08003d1b 	.word	0x08003d1b

080032d4 <_cleanup_r>:
 80032d4:	4901      	ldr	r1, [pc, #4]	; (80032dc <_cleanup_r+0x8>)
 80032d6:	f000 b8af 	b.w	8003438 <_fwalk_reent>
 80032da:	bf00      	nop
 80032dc:	08003215 	.word	0x08003215

080032e0 <__sfmoreglue>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	2568      	movs	r5, #104	; 0x68
 80032e4:	1e4a      	subs	r2, r1, #1
 80032e6:	4355      	muls	r5, r2
 80032e8:	460e      	mov	r6, r1
 80032ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032ee:	f000 f97d 	bl	80035ec <_malloc_r>
 80032f2:	4604      	mov	r4, r0
 80032f4:	b140      	cbz	r0, 8003308 <__sfmoreglue+0x28>
 80032f6:	2100      	movs	r1, #0
 80032f8:	e9c0 1600 	strd	r1, r6, [r0]
 80032fc:	300c      	adds	r0, #12
 80032fe:	60a0      	str	r0, [r4, #8]
 8003300:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003304:	f7ff fe1a 	bl	8002f3c <memset>
 8003308:	4620      	mov	r0, r4
 800330a:	bd70      	pop	{r4, r5, r6, pc}

0800330c <__sfp_lock_acquire>:
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <__sfp_lock_acquire+0x8>)
 800330e:	f000 b8b3 	b.w	8003478 <__retarget_lock_acquire_recursive>
 8003312:	bf00      	nop
 8003314:	20000258 	.word	0x20000258

08003318 <__sfp_lock_release>:
 8003318:	4801      	ldr	r0, [pc, #4]	; (8003320 <__sfp_lock_release+0x8>)
 800331a:	f000 b8ae 	b.w	800347a <__retarget_lock_release_recursive>
 800331e:	bf00      	nop
 8003320:	20000258 	.word	0x20000258

08003324 <__sinit_lock_acquire>:
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <__sinit_lock_acquire+0x8>)
 8003326:	f000 b8a7 	b.w	8003478 <__retarget_lock_acquire_recursive>
 800332a:	bf00      	nop
 800332c:	20000253 	.word	0x20000253

08003330 <__sinit_lock_release>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__sinit_lock_release+0x8>)
 8003332:	f000 b8a2 	b.w	800347a <__retarget_lock_release_recursive>
 8003336:	bf00      	nop
 8003338:	20000253 	.word	0x20000253

0800333c <__sinit>:
 800333c:	b510      	push	{r4, lr}
 800333e:	4604      	mov	r4, r0
 8003340:	f7ff fff0 	bl	8003324 <__sinit_lock_acquire>
 8003344:	69a3      	ldr	r3, [r4, #24]
 8003346:	b11b      	cbz	r3, 8003350 <__sinit+0x14>
 8003348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800334c:	f7ff bff0 	b.w	8003330 <__sinit_lock_release>
 8003350:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003354:	6523      	str	r3, [r4, #80]	; 0x50
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <__sinit+0x68>)
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <__sinit+0x6c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	62a2      	str	r2, [r4, #40]	; 0x28
 800335e:	42a3      	cmp	r3, r4
 8003360:	bf08      	it	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	4620      	mov	r0, r4
 8003366:	bf08      	it	eq
 8003368:	61a3      	streq	r3, [r4, #24]
 800336a:	f000 f81f 	bl	80033ac <__sfp>
 800336e:	6060      	str	r0, [r4, #4]
 8003370:	4620      	mov	r0, r4
 8003372:	f000 f81b 	bl	80033ac <__sfp>
 8003376:	60a0      	str	r0, [r4, #8]
 8003378:	4620      	mov	r0, r4
 800337a:	f000 f817 	bl	80033ac <__sfp>
 800337e:	2200      	movs	r2, #0
 8003380:	2104      	movs	r1, #4
 8003382:	60e0      	str	r0, [r4, #12]
 8003384:	6860      	ldr	r0, [r4, #4]
 8003386:	f7ff ff81 	bl	800328c <std>
 800338a:	2201      	movs	r2, #1
 800338c:	2109      	movs	r1, #9
 800338e:	68a0      	ldr	r0, [r4, #8]
 8003390:	f7ff ff7c 	bl	800328c <std>
 8003394:	2202      	movs	r2, #2
 8003396:	2112      	movs	r1, #18
 8003398:	68e0      	ldr	r0, [r4, #12]
 800339a:	f7ff ff77 	bl	800328c <std>
 800339e:	2301      	movs	r3, #1
 80033a0:	61a3      	str	r3, [r4, #24]
 80033a2:	e7d1      	b.n	8003348 <__sinit+0xc>
 80033a4:	08004060 	.word	0x08004060
 80033a8:	080032d5 	.word	0x080032d5

080033ac <__sfp>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	4607      	mov	r7, r0
 80033b0:	f7ff ffac 	bl	800330c <__sfp_lock_acquire>
 80033b4:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <__sfp+0x84>)
 80033b6:	681e      	ldr	r6, [r3, #0]
 80033b8:	69b3      	ldr	r3, [r6, #24]
 80033ba:	b913      	cbnz	r3, 80033c2 <__sfp+0x16>
 80033bc:	4630      	mov	r0, r6
 80033be:	f7ff ffbd 	bl	800333c <__sinit>
 80033c2:	3648      	adds	r6, #72	; 0x48
 80033c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	d503      	bpl.n	80033d4 <__sfp+0x28>
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	b30b      	cbz	r3, 8003414 <__sfp+0x68>
 80033d0:	6836      	ldr	r6, [r6, #0]
 80033d2:	e7f7      	b.n	80033c4 <__sfp+0x18>
 80033d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033d8:	b9d5      	cbnz	r5, 8003410 <__sfp+0x64>
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <__sfp+0x88>)
 80033dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033e0:	60e3      	str	r3, [r4, #12]
 80033e2:	6665      	str	r5, [r4, #100]	; 0x64
 80033e4:	f000 f847 	bl	8003476 <__retarget_lock_init_recursive>
 80033e8:	f7ff ff96 	bl	8003318 <__sfp_lock_release>
 80033ec:	2208      	movs	r2, #8
 80033ee:	4629      	mov	r1, r5
 80033f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033f8:	6025      	str	r5, [r4, #0]
 80033fa:	61a5      	str	r5, [r4, #24]
 80033fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003400:	f7ff fd9c 	bl	8002f3c <memset>
 8003404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800340c:	4620      	mov	r0, r4
 800340e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003410:	3468      	adds	r4, #104	; 0x68
 8003412:	e7d9      	b.n	80033c8 <__sfp+0x1c>
 8003414:	2104      	movs	r1, #4
 8003416:	4638      	mov	r0, r7
 8003418:	f7ff ff62 	bl	80032e0 <__sfmoreglue>
 800341c:	4604      	mov	r4, r0
 800341e:	6030      	str	r0, [r6, #0]
 8003420:	2800      	cmp	r0, #0
 8003422:	d1d5      	bne.n	80033d0 <__sfp+0x24>
 8003424:	f7ff ff78 	bl	8003318 <__sfp_lock_release>
 8003428:	230c      	movs	r3, #12
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	e7ee      	b.n	800340c <__sfp+0x60>
 800342e:	bf00      	nop
 8003430:	08004060 	.word	0x08004060
 8003434:	ffff0001 	.word	0xffff0001

08003438 <_fwalk_reent>:
 8003438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800343c:	4606      	mov	r6, r0
 800343e:	4688      	mov	r8, r1
 8003440:	2700      	movs	r7, #0
 8003442:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800344a:	f1b9 0901 	subs.w	r9, r9, #1
 800344e:	d505      	bpl.n	800345c <_fwalk_reent+0x24>
 8003450:	6824      	ldr	r4, [r4, #0]
 8003452:	2c00      	cmp	r4, #0
 8003454:	d1f7      	bne.n	8003446 <_fwalk_reent+0xe>
 8003456:	4638      	mov	r0, r7
 8003458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800345c:	89ab      	ldrh	r3, [r5, #12]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d907      	bls.n	8003472 <_fwalk_reent+0x3a>
 8003462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003466:	3301      	adds	r3, #1
 8003468:	d003      	beq.n	8003472 <_fwalk_reent+0x3a>
 800346a:	4629      	mov	r1, r5
 800346c:	4630      	mov	r0, r6
 800346e:	47c0      	blx	r8
 8003470:	4307      	orrs	r7, r0
 8003472:	3568      	adds	r5, #104	; 0x68
 8003474:	e7e9      	b.n	800344a <_fwalk_reent+0x12>

08003476 <__retarget_lock_init_recursive>:
 8003476:	4770      	bx	lr

08003478 <__retarget_lock_acquire_recursive>:
 8003478:	4770      	bx	lr

0800347a <__retarget_lock_release_recursive>:
 800347a:	4770      	bx	lr

0800347c <__swhatbuf_r>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	460e      	mov	r6, r1
 8003480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003484:	4614      	mov	r4, r2
 8003486:	2900      	cmp	r1, #0
 8003488:	461d      	mov	r5, r3
 800348a:	b096      	sub	sp, #88	; 0x58
 800348c:	da07      	bge.n	800349e <__swhatbuf_r+0x22>
 800348e:	2300      	movs	r3, #0
 8003490:	602b      	str	r3, [r5, #0]
 8003492:	89b3      	ldrh	r3, [r6, #12]
 8003494:	061a      	lsls	r2, r3, #24
 8003496:	d410      	bmi.n	80034ba <__swhatbuf_r+0x3e>
 8003498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800349c:	e00e      	b.n	80034bc <__swhatbuf_r+0x40>
 800349e:	466a      	mov	r2, sp
 80034a0:	f000 fd22 	bl	8003ee8 <_fstat_r>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	dbf2      	blt.n	800348e <__swhatbuf_r+0x12>
 80034a8:	9a01      	ldr	r2, [sp, #4]
 80034aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034b2:	425a      	negs	r2, r3
 80034b4:	415a      	adcs	r2, r3
 80034b6:	602a      	str	r2, [r5, #0]
 80034b8:	e7ee      	b.n	8003498 <__swhatbuf_r+0x1c>
 80034ba:	2340      	movs	r3, #64	; 0x40
 80034bc:	2000      	movs	r0, #0
 80034be:	6023      	str	r3, [r4, #0]
 80034c0:	b016      	add	sp, #88	; 0x58
 80034c2:	bd70      	pop	{r4, r5, r6, pc}

080034c4 <__smakebuf_r>:
 80034c4:	898b      	ldrh	r3, [r1, #12]
 80034c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034c8:	079d      	lsls	r5, r3, #30
 80034ca:	4606      	mov	r6, r0
 80034cc:	460c      	mov	r4, r1
 80034ce:	d507      	bpl.n	80034e0 <__smakebuf_r+0x1c>
 80034d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	6123      	str	r3, [r4, #16]
 80034d8:	2301      	movs	r3, #1
 80034da:	6163      	str	r3, [r4, #20]
 80034dc:	b002      	add	sp, #8
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	466a      	mov	r2, sp
 80034e2:	ab01      	add	r3, sp, #4
 80034e4:	f7ff ffca 	bl	800347c <__swhatbuf_r>
 80034e8:	9900      	ldr	r1, [sp, #0]
 80034ea:	4605      	mov	r5, r0
 80034ec:	4630      	mov	r0, r6
 80034ee:	f000 f87d 	bl	80035ec <_malloc_r>
 80034f2:	b948      	cbnz	r0, 8003508 <__smakebuf_r+0x44>
 80034f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f8:	059a      	lsls	r2, r3, #22
 80034fa:	d4ef      	bmi.n	80034dc <__smakebuf_r+0x18>
 80034fc:	f023 0303 	bic.w	r3, r3, #3
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	81a3      	strh	r3, [r4, #12]
 8003506:	e7e3      	b.n	80034d0 <__smakebuf_r+0xc>
 8003508:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <__smakebuf_r+0x7c>)
 800350a:	62b3      	str	r3, [r6, #40]	; 0x28
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	6020      	str	r0, [r4, #0]
 8003510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003514:	81a3      	strh	r3, [r4, #12]
 8003516:	9b00      	ldr	r3, [sp, #0]
 8003518:	6120      	str	r0, [r4, #16]
 800351a:	6163      	str	r3, [r4, #20]
 800351c:	9b01      	ldr	r3, [sp, #4]
 800351e:	b15b      	cbz	r3, 8003538 <__smakebuf_r+0x74>
 8003520:	4630      	mov	r0, r6
 8003522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003526:	f000 fcf1 	bl	8003f0c <_isatty_r>
 800352a:	b128      	cbz	r0, 8003538 <__smakebuf_r+0x74>
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	81a3      	strh	r3, [r4, #12]
 8003538:	89a0      	ldrh	r0, [r4, #12]
 800353a:	4305      	orrs	r5, r0
 800353c:	81a5      	strh	r5, [r4, #12]
 800353e:	e7cd      	b.n	80034dc <__smakebuf_r+0x18>
 8003540:	080032d5 	.word	0x080032d5

08003544 <malloc>:
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <malloc+0xc>)
 8003546:	4601      	mov	r1, r0
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	f000 b84f 	b.w	80035ec <_malloc_r>
 800354e:	bf00      	nop
 8003550:	2000001c 	.word	0x2000001c

08003554 <_free_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	4605      	mov	r5, r0
 8003558:	2900      	cmp	r1, #0
 800355a:	d043      	beq.n	80035e4 <_free_r+0x90>
 800355c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003560:	1f0c      	subs	r4, r1, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	bfb8      	it	lt
 8003566:	18e4      	addlt	r4, r4, r3
 8003568:	f000 fd00 	bl	8003f6c <__malloc_lock>
 800356c:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <_free_r+0x94>)
 800356e:	6813      	ldr	r3, [r2, #0]
 8003570:	4610      	mov	r0, r2
 8003572:	b933      	cbnz	r3, 8003582 <_free_r+0x2e>
 8003574:	6063      	str	r3, [r4, #4]
 8003576:	6014      	str	r4, [r2, #0]
 8003578:	4628      	mov	r0, r5
 800357a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800357e:	f000 bcfb 	b.w	8003f78 <__malloc_unlock>
 8003582:	42a3      	cmp	r3, r4
 8003584:	d90a      	bls.n	800359c <_free_r+0x48>
 8003586:	6821      	ldr	r1, [r4, #0]
 8003588:	1862      	adds	r2, r4, r1
 800358a:	4293      	cmp	r3, r2
 800358c:	bf01      	itttt	eq
 800358e:	681a      	ldreq	r2, [r3, #0]
 8003590:	685b      	ldreq	r3, [r3, #4]
 8003592:	1852      	addeq	r2, r2, r1
 8003594:	6022      	streq	r2, [r4, #0]
 8003596:	6063      	str	r3, [r4, #4]
 8003598:	6004      	str	r4, [r0, #0]
 800359a:	e7ed      	b.n	8003578 <_free_r+0x24>
 800359c:	461a      	mov	r2, r3
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	b10b      	cbz	r3, 80035a6 <_free_r+0x52>
 80035a2:	42a3      	cmp	r3, r4
 80035a4:	d9fa      	bls.n	800359c <_free_r+0x48>
 80035a6:	6811      	ldr	r1, [r2, #0]
 80035a8:	1850      	adds	r0, r2, r1
 80035aa:	42a0      	cmp	r0, r4
 80035ac:	d10b      	bne.n	80035c6 <_free_r+0x72>
 80035ae:	6820      	ldr	r0, [r4, #0]
 80035b0:	4401      	add	r1, r0
 80035b2:	1850      	adds	r0, r2, r1
 80035b4:	4283      	cmp	r3, r0
 80035b6:	6011      	str	r1, [r2, #0]
 80035b8:	d1de      	bne.n	8003578 <_free_r+0x24>
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4401      	add	r1, r0
 80035c0:	6011      	str	r1, [r2, #0]
 80035c2:	6053      	str	r3, [r2, #4]
 80035c4:	e7d8      	b.n	8003578 <_free_r+0x24>
 80035c6:	d902      	bls.n	80035ce <_free_r+0x7a>
 80035c8:	230c      	movs	r3, #12
 80035ca:	602b      	str	r3, [r5, #0]
 80035cc:	e7d4      	b.n	8003578 <_free_r+0x24>
 80035ce:	6820      	ldr	r0, [r4, #0]
 80035d0:	1821      	adds	r1, r4, r0
 80035d2:	428b      	cmp	r3, r1
 80035d4:	bf01      	itttt	eq
 80035d6:	6819      	ldreq	r1, [r3, #0]
 80035d8:	685b      	ldreq	r3, [r3, #4]
 80035da:	1809      	addeq	r1, r1, r0
 80035dc:	6021      	streq	r1, [r4, #0]
 80035de:	6063      	str	r3, [r4, #4]
 80035e0:	6054      	str	r4, [r2, #4]
 80035e2:	e7c9      	b.n	8003578 <_free_r+0x24>
 80035e4:	bd38      	pop	{r3, r4, r5, pc}
 80035e6:	bf00      	nop
 80035e8:	20000240 	.word	0x20000240

080035ec <_malloc_r>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	1ccd      	adds	r5, r1, #3
 80035f0:	f025 0503 	bic.w	r5, r5, #3
 80035f4:	3508      	adds	r5, #8
 80035f6:	2d0c      	cmp	r5, #12
 80035f8:	bf38      	it	cc
 80035fa:	250c      	movcc	r5, #12
 80035fc:	2d00      	cmp	r5, #0
 80035fe:	4606      	mov	r6, r0
 8003600:	db01      	blt.n	8003606 <_malloc_r+0x1a>
 8003602:	42a9      	cmp	r1, r5
 8003604:	d903      	bls.n	800360e <_malloc_r+0x22>
 8003606:	230c      	movs	r3, #12
 8003608:	6033      	str	r3, [r6, #0]
 800360a:	2000      	movs	r0, #0
 800360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360e:	f000 fcad 	bl	8003f6c <__malloc_lock>
 8003612:	4921      	ldr	r1, [pc, #132]	; (8003698 <_malloc_r+0xac>)
 8003614:	680a      	ldr	r2, [r1, #0]
 8003616:	4614      	mov	r4, r2
 8003618:	b99c      	cbnz	r4, 8003642 <_malloc_r+0x56>
 800361a:	4f20      	ldr	r7, [pc, #128]	; (800369c <_malloc_r+0xb0>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b923      	cbnz	r3, 800362a <_malloc_r+0x3e>
 8003620:	4621      	mov	r1, r4
 8003622:	4630      	mov	r0, r6
 8003624:	f000 fb2a 	bl	8003c7c <_sbrk_r>
 8003628:	6038      	str	r0, [r7, #0]
 800362a:	4629      	mov	r1, r5
 800362c:	4630      	mov	r0, r6
 800362e:	f000 fb25 	bl	8003c7c <_sbrk_r>
 8003632:	1c43      	adds	r3, r0, #1
 8003634:	d123      	bne.n	800367e <_malloc_r+0x92>
 8003636:	230c      	movs	r3, #12
 8003638:	4630      	mov	r0, r6
 800363a:	6033      	str	r3, [r6, #0]
 800363c:	f000 fc9c 	bl	8003f78 <__malloc_unlock>
 8003640:	e7e3      	b.n	800360a <_malloc_r+0x1e>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	1b5b      	subs	r3, r3, r5
 8003646:	d417      	bmi.n	8003678 <_malloc_r+0x8c>
 8003648:	2b0b      	cmp	r3, #11
 800364a:	d903      	bls.n	8003654 <_malloc_r+0x68>
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	441c      	add	r4, r3
 8003650:	6025      	str	r5, [r4, #0]
 8003652:	e004      	b.n	800365e <_malloc_r+0x72>
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	42a2      	cmp	r2, r4
 8003658:	bf0c      	ite	eq
 800365a:	600b      	streq	r3, [r1, #0]
 800365c:	6053      	strne	r3, [r2, #4]
 800365e:	4630      	mov	r0, r6
 8003660:	f000 fc8a 	bl	8003f78 <__malloc_unlock>
 8003664:	f104 000b 	add.w	r0, r4, #11
 8003668:	1d23      	adds	r3, r4, #4
 800366a:	f020 0007 	bic.w	r0, r0, #7
 800366e:	1ac2      	subs	r2, r0, r3
 8003670:	d0cc      	beq.n	800360c <_malloc_r+0x20>
 8003672:	1a1b      	subs	r3, r3, r0
 8003674:	50a3      	str	r3, [r4, r2]
 8003676:	e7c9      	b.n	800360c <_malloc_r+0x20>
 8003678:	4622      	mov	r2, r4
 800367a:	6864      	ldr	r4, [r4, #4]
 800367c:	e7cc      	b.n	8003618 <_malloc_r+0x2c>
 800367e:	1cc4      	adds	r4, r0, #3
 8003680:	f024 0403 	bic.w	r4, r4, #3
 8003684:	42a0      	cmp	r0, r4
 8003686:	d0e3      	beq.n	8003650 <_malloc_r+0x64>
 8003688:	1a21      	subs	r1, r4, r0
 800368a:	4630      	mov	r0, r6
 800368c:	f000 faf6 	bl	8003c7c <_sbrk_r>
 8003690:	3001      	adds	r0, #1
 8003692:	d1dd      	bne.n	8003650 <_malloc_r+0x64>
 8003694:	e7cf      	b.n	8003636 <_malloc_r+0x4a>
 8003696:	bf00      	nop
 8003698:	20000240 	.word	0x20000240
 800369c:	20000244 	.word	0x20000244

080036a0 <__sfputc_r>:
 80036a0:	6893      	ldr	r3, [r2, #8]
 80036a2:	b410      	push	{r4}
 80036a4:	3b01      	subs	r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	6093      	str	r3, [r2, #8]
 80036aa:	da07      	bge.n	80036bc <__sfputc_r+0x1c>
 80036ac:	6994      	ldr	r4, [r2, #24]
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	db01      	blt.n	80036b6 <__sfputc_r+0x16>
 80036b2:	290a      	cmp	r1, #10
 80036b4:	d102      	bne.n	80036bc <__sfputc_r+0x1c>
 80036b6:	bc10      	pop	{r4}
 80036b8:	f000 bb34 	b.w	8003d24 <__swbuf_r>
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	1c58      	adds	r0, r3, #1
 80036c0:	6010      	str	r0, [r2, #0]
 80036c2:	7019      	strb	r1, [r3, #0]
 80036c4:	4608      	mov	r0, r1
 80036c6:	bc10      	pop	{r4}
 80036c8:	4770      	bx	lr

080036ca <__sfputs_r>:
 80036ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036cc:	4606      	mov	r6, r0
 80036ce:	460f      	mov	r7, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	18d5      	adds	r5, r2, r3
 80036d4:	42ac      	cmp	r4, r5
 80036d6:	d101      	bne.n	80036dc <__sfputs_r+0x12>
 80036d8:	2000      	movs	r0, #0
 80036da:	e007      	b.n	80036ec <__sfputs_r+0x22>
 80036dc:	463a      	mov	r2, r7
 80036de:	4630      	mov	r0, r6
 80036e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e4:	f7ff ffdc 	bl	80036a0 <__sfputc_r>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d1f3      	bne.n	80036d4 <__sfputs_r+0xa>
 80036ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036f0 <_vfiprintf_r>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	460d      	mov	r5, r1
 80036f6:	4614      	mov	r4, r2
 80036f8:	4698      	mov	r8, r3
 80036fa:	4606      	mov	r6, r0
 80036fc:	b09d      	sub	sp, #116	; 0x74
 80036fe:	b118      	cbz	r0, 8003708 <_vfiprintf_r+0x18>
 8003700:	6983      	ldr	r3, [r0, #24]
 8003702:	b90b      	cbnz	r3, 8003708 <_vfiprintf_r+0x18>
 8003704:	f7ff fe1a 	bl	800333c <__sinit>
 8003708:	4b89      	ldr	r3, [pc, #548]	; (8003930 <_vfiprintf_r+0x240>)
 800370a:	429d      	cmp	r5, r3
 800370c:	d11b      	bne.n	8003746 <_vfiprintf_r+0x56>
 800370e:	6875      	ldr	r5, [r6, #4]
 8003710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003712:	07d9      	lsls	r1, r3, #31
 8003714:	d405      	bmi.n	8003722 <_vfiprintf_r+0x32>
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	059a      	lsls	r2, r3, #22
 800371a:	d402      	bmi.n	8003722 <_vfiprintf_r+0x32>
 800371c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800371e:	f7ff feab 	bl	8003478 <__retarget_lock_acquire_recursive>
 8003722:	89ab      	ldrh	r3, [r5, #12]
 8003724:	071b      	lsls	r3, r3, #28
 8003726:	d501      	bpl.n	800372c <_vfiprintf_r+0x3c>
 8003728:	692b      	ldr	r3, [r5, #16]
 800372a:	b9eb      	cbnz	r3, 8003768 <_vfiprintf_r+0x78>
 800372c:	4629      	mov	r1, r5
 800372e:	4630      	mov	r0, r6
 8003730:	f000 fb5c 	bl	8003dec <__swsetup_r>
 8003734:	b1c0      	cbz	r0, 8003768 <_vfiprintf_r+0x78>
 8003736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003738:	07dc      	lsls	r4, r3, #31
 800373a:	d50e      	bpl.n	800375a <_vfiprintf_r+0x6a>
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	b01d      	add	sp, #116	; 0x74
 8003742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003746:	4b7b      	ldr	r3, [pc, #492]	; (8003934 <_vfiprintf_r+0x244>)
 8003748:	429d      	cmp	r5, r3
 800374a:	d101      	bne.n	8003750 <_vfiprintf_r+0x60>
 800374c:	68b5      	ldr	r5, [r6, #8]
 800374e:	e7df      	b.n	8003710 <_vfiprintf_r+0x20>
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <_vfiprintf_r+0x248>)
 8003752:	429d      	cmp	r5, r3
 8003754:	bf08      	it	eq
 8003756:	68f5      	ldreq	r5, [r6, #12]
 8003758:	e7da      	b.n	8003710 <_vfiprintf_r+0x20>
 800375a:	89ab      	ldrh	r3, [r5, #12]
 800375c:	0598      	lsls	r0, r3, #22
 800375e:	d4ed      	bmi.n	800373c <_vfiprintf_r+0x4c>
 8003760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003762:	f7ff fe8a 	bl	800347a <__retarget_lock_release_recursive>
 8003766:	e7e9      	b.n	800373c <_vfiprintf_r+0x4c>
 8003768:	2300      	movs	r3, #0
 800376a:	9309      	str	r3, [sp, #36]	; 0x24
 800376c:	2320      	movs	r3, #32
 800376e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003772:	2330      	movs	r3, #48	; 0x30
 8003774:	f04f 0901 	mov.w	r9, #1
 8003778:	f8cd 800c 	str.w	r8, [sp, #12]
 800377c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800393c <_vfiprintf_r+0x24c>
 8003780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003784:	4623      	mov	r3, r4
 8003786:	469a      	mov	sl, r3
 8003788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800378c:	b10a      	cbz	r2, 8003792 <_vfiprintf_r+0xa2>
 800378e:	2a25      	cmp	r2, #37	; 0x25
 8003790:	d1f9      	bne.n	8003786 <_vfiprintf_r+0x96>
 8003792:	ebba 0b04 	subs.w	fp, sl, r4
 8003796:	d00b      	beq.n	80037b0 <_vfiprintf_r+0xc0>
 8003798:	465b      	mov	r3, fp
 800379a:	4622      	mov	r2, r4
 800379c:	4629      	mov	r1, r5
 800379e:	4630      	mov	r0, r6
 80037a0:	f7ff ff93 	bl	80036ca <__sfputs_r>
 80037a4:	3001      	adds	r0, #1
 80037a6:	f000 80aa 	beq.w	80038fe <_vfiprintf_r+0x20e>
 80037aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037ac:	445a      	add	r2, fp
 80037ae:	9209      	str	r2, [sp, #36]	; 0x24
 80037b0:	f89a 3000 	ldrb.w	r3, [sl]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a2 	beq.w	80038fe <_vfiprintf_r+0x20e>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037c4:	f10a 0a01 	add.w	sl, sl, #1
 80037c8:	9304      	str	r3, [sp, #16]
 80037ca:	9307      	str	r3, [sp, #28]
 80037cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037d0:	931a      	str	r3, [sp, #104]	; 0x68
 80037d2:	4654      	mov	r4, sl
 80037d4:	2205      	movs	r2, #5
 80037d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037da:	4858      	ldr	r0, [pc, #352]	; (800393c <_vfiprintf_r+0x24c>)
 80037dc:	f000 fbb8 	bl	8003f50 <memchr>
 80037e0:	9a04      	ldr	r2, [sp, #16]
 80037e2:	b9d8      	cbnz	r0, 800381c <_vfiprintf_r+0x12c>
 80037e4:	06d1      	lsls	r1, r2, #27
 80037e6:	bf44      	itt	mi
 80037e8:	2320      	movmi	r3, #32
 80037ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ee:	0713      	lsls	r3, r2, #28
 80037f0:	bf44      	itt	mi
 80037f2:	232b      	movmi	r3, #43	; 0x2b
 80037f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037f8:	f89a 3000 	ldrb.w	r3, [sl]
 80037fc:	2b2a      	cmp	r3, #42	; 0x2a
 80037fe:	d015      	beq.n	800382c <_vfiprintf_r+0x13c>
 8003800:	4654      	mov	r4, sl
 8003802:	2000      	movs	r0, #0
 8003804:	f04f 0c0a 	mov.w	ip, #10
 8003808:	9a07      	ldr	r2, [sp, #28]
 800380a:	4621      	mov	r1, r4
 800380c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003810:	3b30      	subs	r3, #48	; 0x30
 8003812:	2b09      	cmp	r3, #9
 8003814:	d94e      	bls.n	80038b4 <_vfiprintf_r+0x1c4>
 8003816:	b1b0      	cbz	r0, 8003846 <_vfiprintf_r+0x156>
 8003818:	9207      	str	r2, [sp, #28]
 800381a:	e014      	b.n	8003846 <_vfiprintf_r+0x156>
 800381c:	eba0 0308 	sub.w	r3, r0, r8
 8003820:	fa09 f303 	lsl.w	r3, r9, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	46a2      	mov	sl, r4
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	e7d2      	b.n	80037d2 <_vfiprintf_r+0xe2>
 800382c:	9b03      	ldr	r3, [sp, #12]
 800382e:	1d19      	adds	r1, r3, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	9103      	str	r1, [sp, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	bfbb      	ittet	lt
 8003838:	425b      	neglt	r3, r3
 800383a:	f042 0202 	orrlt.w	r2, r2, #2
 800383e:	9307      	strge	r3, [sp, #28]
 8003840:	9307      	strlt	r3, [sp, #28]
 8003842:	bfb8      	it	lt
 8003844:	9204      	strlt	r2, [sp, #16]
 8003846:	7823      	ldrb	r3, [r4, #0]
 8003848:	2b2e      	cmp	r3, #46	; 0x2e
 800384a:	d10c      	bne.n	8003866 <_vfiprintf_r+0x176>
 800384c:	7863      	ldrb	r3, [r4, #1]
 800384e:	2b2a      	cmp	r3, #42	; 0x2a
 8003850:	d135      	bne.n	80038be <_vfiprintf_r+0x1ce>
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	3402      	adds	r4, #2
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	9203      	str	r2, [sp, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	bfb8      	it	lt
 8003860:	f04f 33ff 	movlt.w	r3, #4294967295
 8003864:	9305      	str	r3, [sp, #20]
 8003866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800394c <_vfiprintf_r+0x25c>
 800386a:	2203      	movs	r2, #3
 800386c:	4650      	mov	r0, sl
 800386e:	7821      	ldrb	r1, [r4, #0]
 8003870:	f000 fb6e 	bl	8003f50 <memchr>
 8003874:	b140      	cbz	r0, 8003888 <_vfiprintf_r+0x198>
 8003876:	2340      	movs	r3, #64	; 0x40
 8003878:	eba0 000a 	sub.w	r0, r0, sl
 800387c:	fa03 f000 	lsl.w	r0, r3, r0
 8003880:	9b04      	ldr	r3, [sp, #16]
 8003882:	3401      	adds	r4, #1
 8003884:	4303      	orrs	r3, r0
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800388c:	2206      	movs	r2, #6
 800388e:	482c      	ldr	r0, [pc, #176]	; (8003940 <_vfiprintf_r+0x250>)
 8003890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003894:	f000 fb5c 	bl	8003f50 <memchr>
 8003898:	2800      	cmp	r0, #0
 800389a:	d03f      	beq.n	800391c <_vfiprintf_r+0x22c>
 800389c:	4b29      	ldr	r3, [pc, #164]	; (8003944 <_vfiprintf_r+0x254>)
 800389e:	bb1b      	cbnz	r3, 80038e8 <_vfiprintf_r+0x1f8>
 80038a0:	9b03      	ldr	r3, [sp, #12]
 80038a2:	3307      	adds	r3, #7
 80038a4:	f023 0307 	bic.w	r3, r3, #7
 80038a8:	3308      	adds	r3, #8
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ae:	443b      	add	r3, r7
 80038b0:	9309      	str	r3, [sp, #36]	; 0x24
 80038b2:	e767      	b.n	8003784 <_vfiprintf_r+0x94>
 80038b4:	460c      	mov	r4, r1
 80038b6:	2001      	movs	r0, #1
 80038b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80038bc:	e7a5      	b.n	800380a <_vfiprintf_r+0x11a>
 80038be:	2300      	movs	r3, #0
 80038c0:	f04f 0c0a 	mov.w	ip, #10
 80038c4:	4619      	mov	r1, r3
 80038c6:	3401      	adds	r4, #1
 80038c8:	9305      	str	r3, [sp, #20]
 80038ca:	4620      	mov	r0, r4
 80038cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038d0:	3a30      	subs	r2, #48	; 0x30
 80038d2:	2a09      	cmp	r2, #9
 80038d4:	d903      	bls.n	80038de <_vfiprintf_r+0x1ee>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0c5      	beq.n	8003866 <_vfiprintf_r+0x176>
 80038da:	9105      	str	r1, [sp, #20]
 80038dc:	e7c3      	b.n	8003866 <_vfiprintf_r+0x176>
 80038de:	4604      	mov	r4, r0
 80038e0:	2301      	movs	r3, #1
 80038e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80038e6:	e7f0      	b.n	80038ca <_vfiprintf_r+0x1da>
 80038e8:	ab03      	add	r3, sp, #12
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	462a      	mov	r2, r5
 80038ee:	4630      	mov	r0, r6
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <_vfiprintf_r+0x258>)
 80038f2:	a904      	add	r1, sp, #16
 80038f4:	f3af 8000 	nop.w
 80038f8:	4607      	mov	r7, r0
 80038fa:	1c78      	adds	r0, r7, #1
 80038fc:	d1d6      	bne.n	80038ac <_vfiprintf_r+0x1bc>
 80038fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003900:	07d9      	lsls	r1, r3, #31
 8003902:	d405      	bmi.n	8003910 <_vfiprintf_r+0x220>
 8003904:	89ab      	ldrh	r3, [r5, #12]
 8003906:	059a      	lsls	r2, r3, #22
 8003908:	d402      	bmi.n	8003910 <_vfiprintf_r+0x220>
 800390a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800390c:	f7ff fdb5 	bl	800347a <__retarget_lock_release_recursive>
 8003910:	89ab      	ldrh	r3, [r5, #12]
 8003912:	065b      	lsls	r3, r3, #25
 8003914:	f53f af12 	bmi.w	800373c <_vfiprintf_r+0x4c>
 8003918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800391a:	e711      	b.n	8003740 <_vfiprintf_r+0x50>
 800391c:	ab03      	add	r3, sp, #12
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	462a      	mov	r2, r5
 8003922:	4630      	mov	r0, r6
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <_vfiprintf_r+0x258>)
 8003926:	a904      	add	r1, sp, #16
 8003928:	f000 f882 	bl	8003a30 <_printf_i>
 800392c:	e7e4      	b.n	80038f8 <_vfiprintf_r+0x208>
 800392e:	bf00      	nop
 8003930:	08004084 	.word	0x08004084
 8003934:	080040a4 	.word	0x080040a4
 8003938:	08004064 	.word	0x08004064
 800393c:	080040c4 	.word	0x080040c4
 8003940:	080040ce 	.word	0x080040ce
 8003944:	00000000 	.word	0x00000000
 8003948:	080036cb 	.word	0x080036cb
 800394c:	080040ca 	.word	0x080040ca

08003950 <_printf_common>:
 8003950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003954:	4616      	mov	r6, r2
 8003956:	4699      	mov	r9, r3
 8003958:	688a      	ldr	r2, [r1, #8]
 800395a:	690b      	ldr	r3, [r1, #16]
 800395c:	4607      	mov	r7, r0
 800395e:	4293      	cmp	r3, r2
 8003960:	bfb8      	it	lt
 8003962:	4613      	movlt	r3, r2
 8003964:	6033      	str	r3, [r6, #0]
 8003966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800396a:	460c      	mov	r4, r1
 800396c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003970:	b10a      	cbz	r2, 8003976 <_printf_common+0x26>
 8003972:	3301      	adds	r3, #1
 8003974:	6033      	str	r3, [r6, #0]
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	0699      	lsls	r1, r3, #26
 800397a:	bf42      	ittt	mi
 800397c:	6833      	ldrmi	r3, [r6, #0]
 800397e:	3302      	addmi	r3, #2
 8003980:	6033      	strmi	r3, [r6, #0]
 8003982:	6825      	ldr	r5, [r4, #0]
 8003984:	f015 0506 	ands.w	r5, r5, #6
 8003988:	d106      	bne.n	8003998 <_printf_common+0x48>
 800398a:	f104 0a19 	add.w	sl, r4, #25
 800398e:	68e3      	ldr	r3, [r4, #12]
 8003990:	6832      	ldr	r2, [r6, #0]
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	42ab      	cmp	r3, r5
 8003996:	dc28      	bgt.n	80039ea <_printf_common+0x9a>
 8003998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800399c:	1e13      	subs	r3, r2, #0
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	bf18      	it	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	0692      	lsls	r2, r2, #26
 80039a6:	d42d      	bmi.n	8003a04 <_printf_common+0xb4>
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039b0:	47c0      	blx	r8
 80039b2:	3001      	adds	r0, #1
 80039b4:	d020      	beq.n	80039f8 <_printf_common+0xa8>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	68e5      	ldr	r5, [r4, #12]
 80039ba:	f003 0306 	and.w	r3, r3, #6
 80039be:	2b04      	cmp	r3, #4
 80039c0:	bf18      	it	ne
 80039c2:	2500      	movne	r5, #0
 80039c4:	6832      	ldr	r2, [r6, #0]
 80039c6:	f04f 0600 	mov.w	r6, #0
 80039ca:	68a3      	ldr	r3, [r4, #8]
 80039cc:	bf08      	it	eq
 80039ce:	1aad      	subeq	r5, r5, r2
 80039d0:	6922      	ldr	r2, [r4, #16]
 80039d2:	bf08      	it	eq
 80039d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039d8:	4293      	cmp	r3, r2
 80039da:	bfc4      	itt	gt
 80039dc:	1a9b      	subgt	r3, r3, r2
 80039de:	18ed      	addgt	r5, r5, r3
 80039e0:	341a      	adds	r4, #26
 80039e2:	42b5      	cmp	r5, r6
 80039e4:	d11a      	bne.n	8003a1c <_printf_common+0xcc>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e008      	b.n	80039fc <_printf_common+0xac>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4652      	mov	r2, sl
 80039ee:	4649      	mov	r1, r9
 80039f0:	4638      	mov	r0, r7
 80039f2:	47c0      	blx	r8
 80039f4:	3001      	adds	r0, #1
 80039f6:	d103      	bne.n	8003a00 <_printf_common+0xb0>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	3501      	adds	r5, #1
 8003a02:	e7c4      	b.n	800398e <_printf_common+0x3e>
 8003a04:	2030      	movs	r0, #48	; 0x30
 8003a06:	18e1      	adds	r1, r4, r3
 8003a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a12:	4422      	add	r2, r4
 8003a14:	3302      	adds	r3, #2
 8003a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a1a:	e7c5      	b.n	80039a8 <_printf_common+0x58>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4622      	mov	r2, r4
 8003a20:	4649      	mov	r1, r9
 8003a22:	4638      	mov	r0, r7
 8003a24:	47c0      	blx	r8
 8003a26:	3001      	adds	r0, #1
 8003a28:	d0e6      	beq.n	80039f8 <_printf_common+0xa8>
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	e7d9      	b.n	80039e2 <_printf_common+0x92>
	...

08003a30 <_printf_i>:
 8003a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a34:	460c      	mov	r4, r1
 8003a36:	7e27      	ldrb	r7, [r4, #24]
 8003a38:	4691      	mov	r9, r2
 8003a3a:	2f78      	cmp	r7, #120	; 0x78
 8003a3c:	4680      	mov	r8, r0
 8003a3e:	469a      	mov	sl, r3
 8003a40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a46:	d807      	bhi.n	8003a58 <_printf_i+0x28>
 8003a48:	2f62      	cmp	r7, #98	; 0x62
 8003a4a:	d80a      	bhi.n	8003a62 <_printf_i+0x32>
 8003a4c:	2f00      	cmp	r7, #0
 8003a4e:	f000 80d9 	beq.w	8003c04 <_printf_i+0x1d4>
 8003a52:	2f58      	cmp	r7, #88	; 0x58
 8003a54:	f000 80a4 	beq.w	8003ba0 <_printf_i+0x170>
 8003a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a60:	e03a      	b.n	8003ad8 <_printf_i+0xa8>
 8003a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a66:	2b15      	cmp	r3, #21
 8003a68:	d8f6      	bhi.n	8003a58 <_printf_i+0x28>
 8003a6a:	a001      	add	r0, pc, #4	; (adr r0, 8003a70 <_printf_i+0x40>)
 8003a6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a70:	08003ac9 	.word	0x08003ac9
 8003a74:	08003add 	.word	0x08003add
 8003a78:	08003a59 	.word	0x08003a59
 8003a7c:	08003a59 	.word	0x08003a59
 8003a80:	08003a59 	.word	0x08003a59
 8003a84:	08003a59 	.word	0x08003a59
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003a59 	.word	0x08003a59
 8003a90:	08003a59 	.word	0x08003a59
 8003a94:	08003a59 	.word	0x08003a59
 8003a98:	08003a59 	.word	0x08003a59
 8003a9c:	08003beb 	.word	0x08003beb
 8003aa0:	08003b0d 	.word	0x08003b0d
 8003aa4:	08003bcd 	.word	0x08003bcd
 8003aa8:	08003a59 	.word	0x08003a59
 8003aac:	08003a59 	.word	0x08003a59
 8003ab0:	08003c0d 	.word	0x08003c0d
 8003ab4:	08003a59 	.word	0x08003a59
 8003ab8:	08003b0d 	.word	0x08003b0d
 8003abc:	08003a59 	.word	0x08003a59
 8003ac0:	08003a59 	.word	0x08003a59
 8003ac4:	08003bd5 	.word	0x08003bd5
 8003ac8:	680b      	ldr	r3, [r1, #0]
 8003aca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ace:	1d1a      	adds	r2, r3, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	600a      	str	r2, [r1, #0]
 8003ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0a4      	b.n	8003c26 <_printf_i+0x1f6>
 8003adc:	6825      	ldr	r5, [r4, #0]
 8003ade:	6808      	ldr	r0, [r1, #0]
 8003ae0:	062e      	lsls	r6, r5, #24
 8003ae2:	f100 0304 	add.w	r3, r0, #4
 8003ae6:	d50a      	bpl.n	8003afe <_printf_i+0xce>
 8003ae8:	6805      	ldr	r5, [r0, #0]
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	da03      	bge.n	8003af8 <_printf_i+0xc8>
 8003af0:	232d      	movs	r3, #45	; 0x2d
 8003af2:	426d      	negs	r5, r5
 8003af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af8:	230a      	movs	r3, #10
 8003afa:	485e      	ldr	r0, [pc, #376]	; (8003c74 <_printf_i+0x244>)
 8003afc:	e019      	b.n	8003b32 <_printf_i+0x102>
 8003afe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b02:	6805      	ldr	r5, [r0, #0]
 8003b04:	600b      	str	r3, [r1, #0]
 8003b06:	bf18      	it	ne
 8003b08:	b22d      	sxthne	r5, r5
 8003b0a:	e7ef      	b.n	8003aec <_printf_i+0xbc>
 8003b0c:	680b      	ldr	r3, [r1, #0]
 8003b0e:	6825      	ldr	r5, [r4, #0]
 8003b10:	1d18      	adds	r0, r3, #4
 8003b12:	6008      	str	r0, [r1, #0]
 8003b14:	0628      	lsls	r0, r5, #24
 8003b16:	d501      	bpl.n	8003b1c <_printf_i+0xec>
 8003b18:	681d      	ldr	r5, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <_printf_i+0xf2>
 8003b1c:	0669      	lsls	r1, r5, #25
 8003b1e:	d5fb      	bpl.n	8003b18 <_printf_i+0xe8>
 8003b20:	881d      	ldrh	r5, [r3, #0]
 8003b22:	2f6f      	cmp	r7, #111	; 0x6f
 8003b24:	bf0c      	ite	eq
 8003b26:	2308      	moveq	r3, #8
 8003b28:	230a      	movne	r3, #10
 8003b2a:	4852      	ldr	r0, [pc, #328]	; (8003c74 <_printf_i+0x244>)
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b32:	6866      	ldr	r6, [r4, #4]
 8003b34:	2e00      	cmp	r6, #0
 8003b36:	bfa8      	it	ge
 8003b38:	6821      	ldrge	r1, [r4, #0]
 8003b3a:	60a6      	str	r6, [r4, #8]
 8003b3c:	bfa4      	itt	ge
 8003b3e:	f021 0104 	bicge.w	r1, r1, #4
 8003b42:	6021      	strge	r1, [r4, #0]
 8003b44:	b90d      	cbnz	r5, 8003b4a <_printf_i+0x11a>
 8003b46:	2e00      	cmp	r6, #0
 8003b48:	d04d      	beq.n	8003be6 <_printf_i+0x1b6>
 8003b4a:	4616      	mov	r6, r2
 8003b4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b50:	fb03 5711 	mls	r7, r3, r1, r5
 8003b54:	5dc7      	ldrb	r7, [r0, r7]
 8003b56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b5a:	462f      	mov	r7, r5
 8003b5c:	42bb      	cmp	r3, r7
 8003b5e:	460d      	mov	r5, r1
 8003b60:	d9f4      	bls.n	8003b4c <_printf_i+0x11c>
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d10b      	bne.n	8003b7e <_printf_i+0x14e>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	07df      	lsls	r7, r3, #31
 8003b6a:	d508      	bpl.n	8003b7e <_printf_i+0x14e>
 8003b6c:	6923      	ldr	r3, [r4, #16]
 8003b6e:	6861      	ldr	r1, [r4, #4]
 8003b70:	4299      	cmp	r1, r3
 8003b72:	bfde      	ittt	le
 8003b74:	2330      	movle	r3, #48	; 0x30
 8003b76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b7e:	1b92      	subs	r2, r2, r6
 8003b80:	6122      	str	r2, [r4, #16]
 8003b82:	464b      	mov	r3, r9
 8003b84:	4621      	mov	r1, r4
 8003b86:	4640      	mov	r0, r8
 8003b88:	f8cd a000 	str.w	sl, [sp]
 8003b8c:	aa03      	add	r2, sp, #12
 8003b8e:	f7ff fedf 	bl	8003950 <_printf_common>
 8003b92:	3001      	adds	r0, #1
 8003b94:	d14c      	bne.n	8003c30 <_printf_i+0x200>
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	b004      	add	sp, #16
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	4834      	ldr	r0, [pc, #208]	; (8003c74 <_printf_i+0x244>)
 8003ba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ba6:	680e      	ldr	r6, [r1, #0]
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f856 5b04 	ldr.w	r5, [r6], #4
 8003bae:	061f      	lsls	r7, r3, #24
 8003bb0:	600e      	str	r6, [r1, #0]
 8003bb2:	d514      	bpl.n	8003bde <_printf_i+0x1ae>
 8003bb4:	07d9      	lsls	r1, r3, #31
 8003bb6:	bf44      	itt	mi
 8003bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8003bbc:	6023      	strmi	r3, [r4, #0]
 8003bbe:	b91d      	cbnz	r5, 8003bc8 <_printf_i+0x198>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	f023 0320 	bic.w	r3, r3, #32
 8003bc6:	6023      	str	r3, [r4, #0]
 8003bc8:	2310      	movs	r3, #16
 8003bca:	e7af      	b.n	8003b2c <_printf_i+0xfc>
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	f043 0320 	orr.w	r3, r3, #32
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	2378      	movs	r3, #120	; 0x78
 8003bd6:	4828      	ldr	r0, [pc, #160]	; (8003c78 <_printf_i+0x248>)
 8003bd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bdc:	e7e3      	b.n	8003ba6 <_printf_i+0x176>
 8003bde:	065e      	lsls	r6, r3, #25
 8003be0:	bf48      	it	mi
 8003be2:	b2ad      	uxthmi	r5, r5
 8003be4:	e7e6      	b.n	8003bb4 <_printf_i+0x184>
 8003be6:	4616      	mov	r6, r2
 8003be8:	e7bb      	b.n	8003b62 <_printf_i+0x132>
 8003bea:	680b      	ldr	r3, [r1, #0]
 8003bec:	6826      	ldr	r6, [r4, #0]
 8003bee:	1d1d      	adds	r5, r3, #4
 8003bf0:	6960      	ldr	r0, [r4, #20]
 8003bf2:	600d      	str	r5, [r1, #0]
 8003bf4:	0635      	lsls	r5, r6, #24
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	d501      	bpl.n	8003bfe <_printf_i+0x1ce>
 8003bfa:	6018      	str	r0, [r3, #0]
 8003bfc:	e002      	b.n	8003c04 <_printf_i+0x1d4>
 8003bfe:	0671      	lsls	r1, r6, #25
 8003c00:	d5fb      	bpl.n	8003bfa <_printf_i+0x1ca>
 8003c02:	8018      	strh	r0, [r3, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	4616      	mov	r6, r2
 8003c08:	6123      	str	r3, [r4, #16]
 8003c0a:	e7ba      	b.n	8003b82 <_printf_i+0x152>
 8003c0c:	680b      	ldr	r3, [r1, #0]
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	600a      	str	r2, [r1, #0]
 8003c12:	681e      	ldr	r6, [r3, #0]
 8003c14:	2100      	movs	r1, #0
 8003c16:	4630      	mov	r0, r6
 8003c18:	6862      	ldr	r2, [r4, #4]
 8003c1a:	f000 f999 	bl	8003f50 <memchr>
 8003c1e:	b108      	cbz	r0, 8003c24 <_printf_i+0x1f4>
 8003c20:	1b80      	subs	r0, r0, r6
 8003c22:	6060      	str	r0, [r4, #4]
 8003c24:	6863      	ldr	r3, [r4, #4]
 8003c26:	6123      	str	r3, [r4, #16]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c2e:	e7a8      	b.n	8003b82 <_printf_i+0x152>
 8003c30:	4632      	mov	r2, r6
 8003c32:	4649      	mov	r1, r9
 8003c34:	4640      	mov	r0, r8
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	47d0      	blx	sl
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d0ab      	beq.n	8003b96 <_printf_i+0x166>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	079b      	lsls	r3, r3, #30
 8003c42:	d413      	bmi.n	8003c6c <_printf_i+0x23c>
 8003c44:	68e0      	ldr	r0, [r4, #12]
 8003c46:	9b03      	ldr	r3, [sp, #12]
 8003c48:	4298      	cmp	r0, r3
 8003c4a:	bfb8      	it	lt
 8003c4c:	4618      	movlt	r0, r3
 8003c4e:	e7a4      	b.n	8003b9a <_printf_i+0x16a>
 8003c50:	2301      	movs	r3, #1
 8003c52:	4632      	mov	r2, r6
 8003c54:	4649      	mov	r1, r9
 8003c56:	4640      	mov	r0, r8
 8003c58:	47d0      	blx	sl
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d09b      	beq.n	8003b96 <_printf_i+0x166>
 8003c5e:	3501      	adds	r5, #1
 8003c60:	68e3      	ldr	r3, [r4, #12]
 8003c62:	9903      	ldr	r1, [sp, #12]
 8003c64:	1a5b      	subs	r3, r3, r1
 8003c66:	42ab      	cmp	r3, r5
 8003c68:	dcf2      	bgt.n	8003c50 <_printf_i+0x220>
 8003c6a:	e7eb      	b.n	8003c44 <_printf_i+0x214>
 8003c6c:	2500      	movs	r5, #0
 8003c6e:	f104 0619 	add.w	r6, r4, #25
 8003c72:	e7f5      	b.n	8003c60 <_printf_i+0x230>
 8003c74:	080040d5 	.word	0x080040d5
 8003c78:	080040e6 	.word	0x080040e6

08003c7c <_sbrk_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	2300      	movs	r3, #0
 8003c80:	4d05      	ldr	r5, [pc, #20]	; (8003c98 <_sbrk_r+0x1c>)
 8003c82:	4604      	mov	r4, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	602b      	str	r3, [r5, #0]
 8003c88:	f7fc fea6 	bl	80009d8 <_sbrk>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_sbrk_r+0x1a>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_sbrk_r+0x1a>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	2000025c 	.word	0x2000025c

08003c9c <__sread>:
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca4:	f000 f96e 	bl	8003f84 <_read_r>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	bfab      	itete	ge
 8003cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cae:	89a3      	ldrhlt	r3, [r4, #12]
 8003cb0:	181b      	addge	r3, r3, r0
 8003cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cb6:	bfac      	ite	ge
 8003cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cba:	81a3      	strhlt	r3, [r4, #12]
 8003cbc:	bd10      	pop	{r4, pc}

08003cbe <__swrite>:
 8003cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	898b      	ldrh	r3, [r1, #12]
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	05db      	lsls	r3, r3, #23
 8003cca:	460c      	mov	r4, r1
 8003ccc:	4616      	mov	r6, r2
 8003cce:	d505      	bpl.n	8003cdc <__swrite+0x1e>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd8:	f000 f928 	bl	8003f2c <_lseek_r>
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	4632      	mov	r2, r6
 8003ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	463b      	mov	r3, r7
 8003cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf2:	f000 b869 	b.w	8003dc8 <_write_r>

08003cf6 <__sseek>:
 8003cf6:	b510      	push	{r4, lr}
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfe:	f000 f915 	bl	8003f2c <_lseek_r>
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	bf15      	itete	ne
 8003d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d12:	81a3      	strheq	r3, [r4, #12]
 8003d14:	bf18      	it	ne
 8003d16:	81a3      	strhne	r3, [r4, #12]
 8003d18:	bd10      	pop	{r4, pc}

08003d1a <__sclose>:
 8003d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1e:	f000 b8d3 	b.w	8003ec8 <_close_r>
	...

08003d24 <__swbuf_r>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	460e      	mov	r6, r1
 8003d28:	4614      	mov	r4, r2
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	b118      	cbz	r0, 8003d36 <__swbuf_r+0x12>
 8003d2e:	6983      	ldr	r3, [r0, #24]
 8003d30:	b90b      	cbnz	r3, 8003d36 <__swbuf_r+0x12>
 8003d32:	f7ff fb03 	bl	800333c <__sinit>
 8003d36:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <__swbuf_r+0x98>)
 8003d38:	429c      	cmp	r4, r3
 8003d3a:	d12b      	bne.n	8003d94 <__swbuf_r+0x70>
 8003d3c:	686c      	ldr	r4, [r5, #4]
 8003d3e:	69a3      	ldr	r3, [r4, #24]
 8003d40:	60a3      	str	r3, [r4, #8]
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	071a      	lsls	r2, r3, #28
 8003d46:	d52f      	bpl.n	8003da8 <__swbuf_r+0x84>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	b36b      	cbz	r3, 8003da8 <__swbuf_r+0x84>
 8003d4c:	6923      	ldr	r3, [r4, #16]
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	b2f6      	uxtb	r6, r6
 8003d52:	1ac0      	subs	r0, r0, r3
 8003d54:	6963      	ldr	r3, [r4, #20]
 8003d56:	4637      	mov	r7, r6
 8003d58:	4283      	cmp	r3, r0
 8003d5a:	dc04      	bgt.n	8003d66 <__swbuf_r+0x42>
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f7ff fa58 	bl	8003214 <_fflush_r>
 8003d64:	bb30      	cbnz	r0, 8003db4 <__swbuf_r+0x90>
 8003d66:	68a3      	ldr	r3, [r4, #8]
 8003d68:	3001      	adds	r0, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	60a3      	str	r3, [r4, #8]
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	6022      	str	r2, [r4, #0]
 8003d74:	701e      	strb	r6, [r3, #0]
 8003d76:	6963      	ldr	r3, [r4, #20]
 8003d78:	4283      	cmp	r3, r0
 8003d7a:	d004      	beq.n	8003d86 <__swbuf_r+0x62>
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	07db      	lsls	r3, r3, #31
 8003d80:	d506      	bpl.n	8003d90 <__swbuf_r+0x6c>
 8003d82:	2e0a      	cmp	r6, #10
 8003d84:	d104      	bne.n	8003d90 <__swbuf_r+0x6c>
 8003d86:	4621      	mov	r1, r4
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f7ff fa43 	bl	8003214 <_fflush_r>
 8003d8e:	b988      	cbnz	r0, 8003db4 <__swbuf_r+0x90>
 8003d90:	4638      	mov	r0, r7
 8003d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <__swbuf_r+0x9c>)
 8003d96:	429c      	cmp	r4, r3
 8003d98:	d101      	bne.n	8003d9e <__swbuf_r+0x7a>
 8003d9a:	68ac      	ldr	r4, [r5, #8]
 8003d9c:	e7cf      	b.n	8003d3e <__swbuf_r+0x1a>
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <__swbuf_r+0xa0>)
 8003da0:	429c      	cmp	r4, r3
 8003da2:	bf08      	it	eq
 8003da4:	68ec      	ldreq	r4, [r5, #12]
 8003da6:	e7ca      	b.n	8003d3e <__swbuf_r+0x1a>
 8003da8:	4621      	mov	r1, r4
 8003daa:	4628      	mov	r0, r5
 8003dac:	f000 f81e 	bl	8003dec <__swsetup_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d0cb      	beq.n	8003d4c <__swbuf_r+0x28>
 8003db4:	f04f 37ff 	mov.w	r7, #4294967295
 8003db8:	e7ea      	b.n	8003d90 <__swbuf_r+0x6c>
 8003dba:	bf00      	nop
 8003dbc:	08004084 	.word	0x08004084
 8003dc0:	080040a4 	.word	0x080040a4
 8003dc4:	08004064 	.word	0x08004064

08003dc8 <_write_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	4d05      	ldr	r5, [pc, #20]	; (8003de8 <_write_r+0x20>)
 8003dd4:	602a      	str	r2, [r5, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f7fc fdb2 	bl	8000940 <_write>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d102      	bne.n	8003de6 <_write_r+0x1e>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	b103      	cbz	r3, 8003de6 <_write_r+0x1e>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	2000025c 	.word	0x2000025c

08003dec <__swsetup_r>:
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <__swsetup_r+0xcc>)
 8003dee:	b570      	push	{r4, r5, r6, lr}
 8003df0:	681d      	ldr	r5, [r3, #0]
 8003df2:	4606      	mov	r6, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	b125      	cbz	r5, 8003e02 <__swsetup_r+0x16>
 8003df8:	69ab      	ldr	r3, [r5, #24]
 8003dfa:	b913      	cbnz	r3, 8003e02 <__swsetup_r+0x16>
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f7ff fa9d 	bl	800333c <__sinit>
 8003e02:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <__swsetup_r+0xd0>)
 8003e04:	429c      	cmp	r4, r3
 8003e06:	d10f      	bne.n	8003e28 <__swsetup_r+0x3c>
 8003e08:	686c      	ldr	r4, [r5, #4]
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e10:	0719      	lsls	r1, r3, #28
 8003e12:	d42c      	bmi.n	8003e6e <__swsetup_r+0x82>
 8003e14:	06dd      	lsls	r5, r3, #27
 8003e16:	d411      	bmi.n	8003e3c <__swsetup_r+0x50>
 8003e18:	2309      	movs	r3, #9
 8003e1a:	6033      	str	r3, [r6, #0]
 8003e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	e03e      	b.n	8003ea6 <__swsetup_r+0xba>
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <__swsetup_r+0xd4>)
 8003e2a:	429c      	cmp	r4, r3
 8003e2c:	d101      	bne.n	8003e32 <__swsetup_r+0x46>
 8003e2e:	68ac      	ldr	r4, [r5, #8]
 8003e30:	e7eb      	b.n	8003e0a <__swsetup_r+0x1e>
 8003e32:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <__swsetup_r+0xd8>)
 8003e34:	429c      	cmp	r4, r3
 8003e36:	bf08      	it	eq
 8003e38:	68ec      	ldreq	r4, [r5, #12]
 8003e3a:	e7e6      	b.n	8003e0a <__swsetup_r+0x1e>
 8003e3c:	0758      	lsls	r0, r3, #29
 8003e3e:	d512      	bpl.n	8003e66 <__swsetup_r+0x7a>
 8003e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e42:	b141      	cbz	r1, 8003e56 <__swsetup_r+0x6a>
 8003e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e48:	4299      	cmp	r1, r3
 8003e4a:	d002      	beq.n	8003e52 <__swsetup_r+0x66>
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f7ff fb81 	bl	8003554 <_free_r>
 8003e52:	2300      	movs	r3, #0
 8003e54:	6363      	str	r3, [r4, #52]	; 0x34
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e5c:	81a3      	strh	r3, [r4, #12]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6063      	str	r3, [r4, #4]
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f043 0308 	orr.w	r3, r3, #8
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	b94b      	cbnz	r3, 8003e86 <__swsetup_r+0x9a>
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d003      	beq.n	8003e86 <__swsetup_r+0x9a>
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7ff fb1f 	bl	80034c4 <__smakebuf_r>
 8003e86:	89a0      	ldrh	r0, [r4, #12]
 8003e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e8c:	f010 0301 	ands.w	r3, r0, #1
 8003e90:	d00a      	beq.n	8003ea8 <__swsetup_r+0xbc>
 8003e92:	2300      	movs	r3, #0
 8003e94:	60a3      	str	r3, [r4, #8]
 8003e96:	6963      	ldr	r3, [r4, #20]
 8003e98:	425b      	negs	r3, r3
 8003e9a:	61a3      	str	r3, [r4, #24]
 8003e9c:	6923      	ldr	r3, [r4, #16]
 8003e9e:	b943      	cbnz	r3, 8003eb2 <__swsetup_r+0xc6>
 8003ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ea4:	d1ba      	bne.n	8003e1c <__swsetup_r+0x30>
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	0781      	lsls	r1, r0, #30
 8003eaa:	bf58      	it	pl
 8003eac:	6963      	ldrpl	r3, [r4, #20]
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	e7f4      	b.n	8003e9c <__swsetup_r+0xb0>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e7f7      	b.n	8003ea6 <__swsetup_r+0xba>
 8003eb6:	bf00      	nop
 8003eb8:	2000001c 	.word	0x2000001c
 8003ebc:	08004084 	.word	0x08004084
 8003ec0:	080040a4 	.word	0x080040a4
 8003ec4:	08004064 	.word	0x08004064

08003ec8 <_close_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4d05      	ldr	r5, [pc, #20]	; (8003ee4 <_close_r+0x1c>)
 8003ece:	4604      	mov	r4, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	f7fc fd50 	bl	8000978 <_close>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_close_r+0x1a>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_close_r+0x1a>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	2000025c 	.word	0x2000025c

08003ee8 <_fstat_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	2300      	movs	r3, #0
 8003eec:	4d06      	ldr	r5, [pc, #24]	; (8003f08 <_fstat_r+0x20>)
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	f7fc fd4a 	bl	800098e <_fstat>
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	d102      	bne.n	8003f04 <_fstat_r+0x1c>
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	b103      	cbz	r3, 8003f04 <_fstat_r+0x1c>
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	bd38      	pop	{r3, r4, r5, pc}
 8003f06:	bf00      	nop
 8003f08:	2000025c 	.word	0x2000025c

08003f0c <_isatty_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4d05      	ldr	r5, [pc, #20]	; (8003f28 <_isatty_r+0x1c>)
 8003f12:	4604      	mov	r4, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	f7fc fd48 	bl	80009ac <_isatty>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_isatty_r+0x1a>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_isatty_r+0x1a>
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	2000025c 	.word	0x2000025c

08003f2c <_lseek_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4604      	mov	r4, r0
 8003f30:	4608      	mov	r0, r1
 8003f32:	4611      	mov	r1, r2
 8003f34:	2200      	movs	r2, #0
 8003f36:	4d05      	ldr	r5, [pc, #20]	; (8003f4c <_lseek_r+0x20>)
 8003f38:	602a      	str	r2, [r5, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f7fc fd40 	bl	80009c0 <_lseek>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d102      	bne.n	8003f4a <_lseek_r+0x1e>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	b103      	cbz	r3, 8003f4a <_lseek_r+0x1e>
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	2000025c 	.word	0x2000025c

08003f50 <memchr>:
 8003f50:	4603      	mov	r3, r0
 8003f52:	b510      	push	{r4, lr}
 8003f54:	b2c9      	uxtb	r1, r1
 8003f56:	4402      	add	r2, r0
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	d101      	bne.n	8003f62 <memchr+0x12>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e003      	b.n	8003f6a <memchr+0x1a>
 8003f62:	7804      	ldrb	r4, [r0, #0]
 8003f64:	3301      	adds	r3, #1
 8003f66:	428c      	cmp	r4, r1
 8003f68:	d1f6      	bne.n	8003f58 <memchr+0x8>
 8003f6a:	bd10      	pop	{r4, pc}

08003f6c <__malloc_lock>:
 8003f6c:	4801      	ldr	r0, [pc, #4]	; (8003f74 <__malloc_lock+0x8>)
 8003f6e:	f7ff ba83 	b.w	8003478 <__retarget_lock_acquire_recursive>
 8003f72:	bf00      	nop
 8003f74:	20000254 	.word	0x20000254

08003f78 <__malloc_unlock>:
 8003f78:	4801      	ldr	r0, [pc, #4]	; (8003f80 <__malloc_unlock+0x8>)
 8003f7a:	f7ff ba7e 	b.w	800347a <__retarget_lock_release_recursive>
 8003f7e:	bf00      	nop
 8003f80:	20000254 	.word	0x20000254

08003f84 <_read_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	4d05      	ldr	r5, [pc, #20]	; (8003fa4 <_read_r+0x20>)
 8003f90:	602a      	str	r2, [r5, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f7fc fcb7 	bl	8000906 <_read>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_read_r+0x1e>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_read_r+0x1e>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	2000025c 	.word	0x2000025c

08003fa8 <_init>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr

08003fb4 <_fini>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	bf00      	nop
 8003fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fba:	bc08      	pop	{r3}
 8003fbc:	469e      	mov	lr, r3
 8003fbe:	4770      	bx	lr
