// ---------------------------------------------------------------------------------
//   File        :project.h
//   Version     :v1.0.1
//   Date        :2011/02/17
//   Author      :nbk
//   Description :
// ---------------------------------------------------------------------------------

#ifndef __PROJECT_H___
#define __PROJECT_H___

// Tracer-1 better in Taiwan2017
#define RobotNumber			2

//Change LogDataMode in LT.h
#define LogDataMode			1	//1:logdata true, 0:ContestMode

#ifndef __cplusplus
//typedef enum {FALSE = 0, TRUE = !FALSE} bool;
#endif
#include "libBoard.h"
#include <stdbool.h>
#include "libstm32.h"
#include "stm32f4xx.h"
#include "libSysTick.h"
#include "libSensor.h"
#include "libDotMatrix.H"
#include "libSwitch.h"
#include "libMotor.h"
#include "libMPU6000.h"
#include "MadgwickAHRS\MadgwickAHRS.h"
#include "libDebug.h"
#include "LT.h"
#include "libLogData.h"
#include "libKM.h"
#include <stdio.h>
#include <math.h>

#define FALSE 	false
#define TRUE	true

#define MHZ						1000000L
#define dT	0.001f
#define TICK_PERIOD	(int)(dT*MHZ)
#define TICK_FREQ	(int)(1/dT+0.5f)
// ---------------------------------------------------------------------------------
// Data type definition
// ---------------------------------------------------------------------------------
typedef void (*type_fp) (void);

// -------------------------------------------------------------------------------
//  Macros
// ---------------------------------------------------------------------------------

#define DI			__disable_irq()
#define EI			__enable_irq()
#define ABS(n)		((n)>=0?(n):(-n))		// Get absolute value
#define CLIP(n, min, max)	((n)=(n)>(max)?(max):((n)<(min)?(min):(n)))

#define LimitPI(a)		((a)>(M_PI)?(a-2*M_PI):((a)<(-M_PI)?((a)+2*M_PI):(a)))
#define DEG_RAD(a)		(((a)*M_PI)/180)
#define DEG01_RAD(a)	(((a)*M_PI)/1800)
#define RAD_DEG(a)		(((a)*180)/M_PI)
#define RAD_DEG01(a)	(((a)*1800)/M_PI)
#define Limit1800Deg(a)	( ((a)>1800) ? (-3600+(a)) : ( (a)<-1800 ? (3600+(a)) : (a) ) )

#define fputc(c, f)		PutChar(c)
#define fputs(s, f) 	PutStr(s)

// lower number -> higher priority
#define MPU6000_DMA_PRIORITY		1
#define MPU6000_INT_PRIORITY		2
#define SENSOR_ISR_PRIORITY			0
#define SYSTICK_PRIORITY			3
#define USART_ISR_PRIORITY			4
#define DISPLAY_PRIORITY			5

#define HIGH					1
#define LOW						0
#define IO_Write(pin, value)	GPIO_WriteBit(pin, value)
#define IO_Read(pin)			GPIO_ReadInputDataBit(pin)

// IO pins definition. These macros make it easier to write & modify your program
#define LED0_PIN		GPIOB,GPIO_Pin_7
#define LED1_PIN		GPIOA,GPIO_Pin_13


#define LMOTORDIR_PIN	GPIOB, GPIO_Pin_10
#define RMOTORDIR_PIN	GPIOA, GPIO_Pin_12

#define TIM_SensorISR	TIM5

#define SOUND_TWEET				0
#define SOUND_ACK				1

// ---------------------------------------------------------------------------------
//  Global variables
// ---------------------------------------------------------------------------------
extern int32_t	SYSCLK, APB1CLK, APB1TIMERCLK, APB2TIMERCLK, APB2CLK;
extern const char waitMsg[];
extern const int8_t waitMsgSize;
extern char s[80];
extern volatile bool bSWFlag;
extern bool bOpenLoopLogFlag;

extern bool bAlignEnableFlag;
extern int16_t specialTestVariable;
extern int16_t specialTestVariable2;
extern int16_t specialTestVariable1;
extern int16_t specialTestVariable3;

extern uint8_t menuNum;		/* Define the current active menu */
extern bool bBeepFlag;
extern int16_t beepDuration, beepFreq, beepBaseFreq, beepFreqInc;
volatile extern int16_t debugCode, debugCode1, debugCode2;
extern volatile uint16_t elapsedTime, elapsedTime001s;
extern bool	bDispSensorValue;

extern bool bUseEncoderClickFlag;
extern volatile bool bEncoderClickFlag;
extern int16_t encoderClickType;

extern char debugChar;
extern char buf[256];

extern bool bSensorEnableFlag;

extern volatile uint16_t sensorSwitchTime;
extern volatile uint16_t sensorSwitchOffTime;

extern bool bDisplayDelay;
extern bool bBlinkFlag, bScrollFlag, bRawFlag;

extern volatile float gyroSpeedRad;
extern volatile float gyroAngleRad;

// ---------------------------------------------------------------------------------
//  Function prototypes
// ---------------------------------------------------------------------------------
void InitIO();

/* Initialisation of global data (data.c) */
void InitDataCold();    /* Cold start global data initialisation     */
void InitDataWarm();    /* Warm start (after crash) global data init */

                                        /* 7 segment display. */
/* Menu related routines (menu.c) */
void MainMenu();                        /* main or run menu */
char SelectMenuItem(int8_t *startNum, int8_t numOfItem, const char *const *strg);
                                        /* Function for display menu number */
                                        /* and reading the number selected */
                                        /* Display is on 7 seg */
                                        /* Reading is from s/w */
                                        /* A short key press (<0.5sec) denotes scrolling*/
                                        /* of menu item. A long key press (>1 sec) select */
                                        /* that item. For consistency, '0' */
                                        /* should be the exit-menu number */
void MenuChangeVariable(int16_t *variable);

/* Switch, 7seg and beeper routines ( switch.c, s7seg.c, beep.c) */
#define BEEP()				Beep(4000, 100, 30)
#define BEEP_LEFT()			Beep(4100, 80, 30)
#define BEEP_RIGHT()		Beep(3800, 100, -30)
#define BEEP_JUNCTION()		Beep(4400, 100, -20)
#define BEEP_CURVE()		Beep(3000, 100, 0)

void LEDISR();
void PulseLED(int16_t ledNum, unsigned duration);

void InitBeeper();
void Beep(int16_t freq, int16_t duration, int16_t inc);
void BeepOff();
void BeepTone(int16_t freq);

void CalibrateLineSensor();
//Gyro
void CalibrateGyroDCReal();
void CalibrateGyroDC();

/* Side sensors routines (sensor.c) */
void InitSensor();
void OffSensorTx();
void StartSensorISR();
void EnableSensor();
void DisableSensor();
void DisplaySensorOnDotMatrix(int sensorNum);
void PrintSensorValues();
void CollectSensorStatistic();

/* Motor related routines (motor.c) */
void InitMotor(void);		/* motor initialisation */
void UpdateWheelPos();
void InitMotorData();
void PrintMotorValues(void);
void PrintLog();
void ClearLog();
void TestMotorMenu();

// Serial port fns
void STDIO_init(int16_t uartNum, int baudrate);

void UART1_init(int baudrate);
void UART2_init(int baudrate);
void UART3_init(int baudrate);
void UART4_init(int baudrate);
void UART5_init(int baudrate);

int PutChar(int c);
int GetChar(void);
void gotoxy(int x, int y);
void clrscr(void);
bool kbhit();
int RxChar(USART_TypeDef* usart);
int TxChar(USART_TypeDef* usart, char c);
int RxCharISR(int16_t uartNum);
int TxCharISR(int16_t uartNum, char c);
bool RxCharAvailableISR(int16_t uartNum);

// timer stuff
void InitTimer2_PhaseCountingRemap(void);
void InitTimer3_PhaseCounting(void);
void InitTimer8_PhaseCounting(void);
void InitTimer4_PhaseCounting(void);
void InitTimer1_PWM(void);
void InitTimer2_PWM(void);
void InitTimer1_InPWM(bool bCH1, bool bCH2, bool bCH3, bool bCH4);
void InitTimer4_InPWM(bool bCH1, bool bCH2, bool bCH3, bool bCH4);
void InitTimer3_servoPWM(bool bCH1, bool bCH2, bool bCH3, bool bCH4);
void InitTimer8_servoPWM(bool bCH1, bool bCH2, bool bCH3, bool bCH4);
void SetTimer3PWM(int16_t ch, int16_t pwm);
void SetTimer8PWM(int16_t ch, int16_t pwm);
void InitTimer6_1msISR(void);
void InitTimer5_SensorISR(void);
void InitTimer4_SensorISR();
void InitTimer8_Buzzer( void );
void InitTimer4_Buzzer( void );
void PrintInPWM(void);

extern void Delayms(u32 time_x100us);
extern void Handler_SysTick(void);

// GPIO stuff
void GPIO_Init_Mode(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIOMode_TypeDef mode, GPIOOType_TypeDef outputType, GPIOPuPd_TypeDef pullType);

bool ReadDataFromFlash();
void WriteDataToFlash();

bool InvertMatrix4x4(const float m[16], float invOut[16]);
void PrintMatrix4x4(float *m);
#endif
